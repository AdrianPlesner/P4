Package P4.Sable;

Helpers
    digit = ['0' .. '9'];
    letter = ['a' .. 'z'] | ['A' .. 'Z'];
    cr = 13;
    lf = 10;
    tab = 9;
    eol = cr lf | cr | lf;
    blank_help = (' ' | tab | eol)+;
    all = [0 .. 0xFFFF];
    not_cr_lf = [all - [cr + lf]];

Tokens
    blank = blank_help;
    comment = '//' not_cr_lf* eol;
    bool_literal = 'true'|'false';
    add_op = '+' | '-';
    mult_op = '*' | '/' | '%';
    int_literal = digit*;
    float_literal = ['1' .. '9'] digit*'.'digit*;
    string = '"' [not_cr_lf - '"']* '"';
    bool_op = '|' | '&';
    relation_op = '<' | '>' | '<=' | '>=';
    assign = '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=';
    equal_op = '==' | '!=';
    l_paren = '(';
    r_paren = ')';
    l_brack = '{';
    r_brack = '}';
    setup = 'Setup';
    separator = ',';
    dot = '.';
    moves = 'Moves';
    l_box = '[';
    r_box = ']';
    return = 'return';
    semi = ';';
    if = 'if';
    else = 'else';
    switch = 'switch';
    case = 'case';
    default = 'default';
    colon = ':';
    while = 'while';
    for = 'for';
    foreach = 'foreach';
    turn = 'Turn';
    end_con = 'EndCondition';
    in = 'in';
    card = 'Card';
    l_arr = '<';
    r_arr = '>';
    list = 'List';
    typeof = 'typeof';
    fun = 'Function';
    inc = 'include';
    sub = 'Subclass';
    game = 'Game';
    player = 'Player';
    id = letter (letter |digit)*;

Ignored Tokens
    blank, comment;

Productions
    prog = include* P.setup P.moves P.turn P.end_con method_dcl*
    {-> New prog([include.id], setup, [moves.method_dcl], [turn.stmt], [end_con.stmt], [method_dcl])};

    include{-> id} = inc id semi {-> id };

    setup = T.setup l_brack P.card P.player P.game r_brack
    {-> New setup(card.class_body, [game.stmt], player.class_body)};

    card{-> class_body} = T.card class_body {-> class_body};

    class_body = l_brack stmt* method_dcl* subclass* r_brack {-> New class_body([stmt], [method_dcl], [subclass])};

    subclass = sub id class_body {-> New subclass(id, class_body)};

    game{-> stmt*} = T.game block{-> [block.stmt]};

    player{-> class_body} = T.player class_body {-> class_body};

    moves{-> method_dcl*} = T.moves l_brack method_dcl* r_brack {-> [method_dcl]};

    dcl{-> stmt} = type single_dcl dcl_list* {-> New stmt.dcl(type, [single_dcl, dcl_list.single_dcl])};

    single_dcl = id init? {-> New single_dcl(id, init.expr)};

    dcl_list{-> single_dcl} = separator single_dcl {-> single_dcl};

    init{-> expr} = assign expr {-> expr};

    expr = {expand} expr bool_op equality {-> New expr.bool_op(expr, bool_op, equality.expr)} | {single} equality {-> equality.expr};

    equality{-> expr} = {expand} equality equal_op relation {-> New expr.equality(equality.expr, equal_op, relation.expr)} |
    {single} relation {-> relation.expr};

    relation{-> expr} = {expand} relation relation_op add_expr {-> New expr.relation(relation.expr, relation_op, add_expr.expr )} |
    {single} add_expr {-> add_expr.expr};

    add_expr{-> expr} = {expand} add_expr add_op term {-> New expr.add_op(add_expr.expr, add_op, term.expr)} | {single} term {-> term.expr};

    term{-> expr} = {expand} term mult_op factor {-> New expr.mult_op(term.expr, mult_op, factor.expr)} | {factor} factor {-> factor.expr};

    factor{-> expr} = {expand} parens {-> parens.expr} | {literal} literal {-> New expr.literal(literal)} | {val} val {-> New expr.value(val)} |
    {init} l_brack element_list* r_brack {-> New expr.list([element_list.element])};

    parens{-> expr} = l_paren expr r_paren {-> expr};

    literal = {int} int_literal {-> New literal.int(int_literal)} | {float} float_literal {-> New literal.float(float_literal)} |
    {string} string {-> New literal.string(string)} | {bool} bool_literal {-> New literal.bool(bool_literal)} ;

    element_list{-> element} = element semi {-> element};

    element = expr? element_expand* {-> New element([expr, element_expand.expr])};

    element_expand{-> expr} = separator expr{-> expr};

    val = call_field val_list* {-> New val([call_field, val_list.call_field])} ;

    val_list{-> call_field} = dot call_field{-> call_field};

    call_field = {field} id {-> New call_field.field(id)} | {call} id call {-> New call_field.call(id, [call.expr])};

    call{-> expr*} = l_paren expr? param* r_paren {-> [expr, param.expr]};

    param{-> expr} = separator expr {-> expr};

    method_dcl = fun id l_paren param_dcl_list? r_paren typeof type l_brack stmt* r_brack
    {-> New method_dcl(id, [param_dcl_list.param_dcl], type, [stmt])};

    param_dcl_list{-> param_dcl*} = param_dcl expand_param* {-> [param_dcl, expand_param.param_dcl]};

    expand_param{-> param_dcl} = separator param_dcl {-> param_dcl};

    param_dcl = type id {-> New param_dcl(type, id)};

    type = {list} P.list id {-> New type.list(id)} | {var} id {-> New type.var(id)} ;

    list = T.list typeof;

    stmt = {select} select_stmt {-> select_stmt.stmt} | {dcl} dcl semi {-> dcl.stmt} |
    {loop} loop_stmt {-> loop_stmt.stmt} | {assign} assign_value semi {-> assign_value.stmt} |
    {call} val semi {-> New stmt.call(val)} | {return} return expr semi {-> New stmt.return(expr)} ;

    select_stmt{-> stmt} = {if} if_stmt {-> if_stmt.stmt} | {switch} switch_stmt {-> switch_stmt.stmt};

    block {-> stmt*} = l_brack stmt* r_brack {-> [stmt]};

    if_stmt{-> stmt} = if expr block else_if* else_stmt? {-> New stmt.if(expr, [block.stmt], [else_if], [else_stmt.stmt])};

    else_if = else if expr block {-> New else_if(expr, [block.stmt])};

    else_stmt{-> stmt*} = else block{-> [block.stmt]};

    switch_stmt{-> stmt} = switch val l_brack P.case+ r_brack {-> New stmt.switch(val, [case])};

    case = {case} T.case expr colon block {-> New case.case(expr, [block.stmt])} | {default} default colon block {-> New case.default([block.stmt])};

    loop_stmt{-> stmt} = {while} while expr block {-> New stmt.while(expr, [block.stmt])} |
    {foreach} for id in val block {-> New stmt.foreach(id, val, [block.stmt])} |
    {for} for init_loop [a]:semi expr [b]:semi assign_value block {-> New stmt.for(init_loop.stmt, expr, assign_value.stmt, [block.stmt])};

    init_loop{-> stmt} = {declare} dcl {-> dcl.stmt} | {assign} assign_value {-> assign_value.stmt};

    assign_value{-> stmt} = val assign expr {-> New stmt.assign(val, assign, expr)};

    turn{-> stmt*} = T.turn block {-> [block.stmt]};

    end_con{-> stmt*} = T.end_con block {-> [block.stmt]};


Abstract Syntax Tree
    prog = [includes]:id* P.setup [moves]:method_dcl* [turn]:stmt* [end_condition]:stmt* [methods]:method_dcl* ;

    setup = [card]:class_body [game]:stmt* [player]:class_body;

    class_body = [dcls]:stmt* [methods]:method_dcl* [subclasses]:subclass*;

    subclass = [name]:id [body]:class_body;

    expr = {list} [elements]:element* | {mult_op} [l]:expr [operator]:mult_op [r]:expr | {literal} [value]:literal | {value} val |
    {add_op} [l]:expr [operator]:add_op [r]:expr | {relation} [l]:expr [operator]:relation_op [r]:expr |
    {equality} [l]:expr [operator]:equal_op [r]:expr | {bool_op} [l]:expr [operator]:bool_op [r]:expr;

    literal = {int} [value]:int_literal | {float} [value]:float_literal | {string} [value]:string | {bool} [value]:bool_literal;

    element = [values]:expr*;

    val = call_field*;

    call_field = {field} id | {call} id [params]: expr*;

    single_dcl = id expr?;

    type = {list} [type]:id | {var} [type]:id;

    else_if = [predicate]:expr [then]:stmt* ;

    stmt = {dcl} type [dcls]:single_dcl* | {assign} [var]:val [operation]:assign expr | {call} val | {if} [predicate]:expr [then]:stmt* [elseifs]:else_if* [else]:stmt* |
    {switch} [variable]:val [cases]:P.case+ | {for} [init]:stmt [predicate]:expr [update]:stmt [then]:stmt* |
    {foreach} id [list]:val [then]:stmt* | {while} [predicate]:expr [then]:stmt* | {return} expr;

    case = {case} [case]:expr [then]:stmt* | {default} [then]:stmt*;

    method_dcl = [name]:id [params]:param_dcl* [returntype]:type [body]:stmt*;

    param_dcl = type [name]:id;

