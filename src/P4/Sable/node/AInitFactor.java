/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import java.util.*;
import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AInitFactor extends PFactor
{
    private TLBrack _lBrack_;
    private final LinkedList<PElementList> _elementList_ = new LinkedList<PElementList>();
    private TRBrack _rBrack_;

    public AInitFactor()
    {
        // Constructor
    }

    public AInitFactor(
        @SuppressWarnings("hiding") TLBrack _lBrack_,
        @SuppressWarnings("hiding") List<?> _elementList_,
        @SuppressWarnings("hiding") TRBrack _rBrack_)
    {
        // Constructor
        setLBrack(_lBrack_);

        setElementList(_elementList_);

        setRBrack(_rBrack_);

    }

    @Override
    public Object clone()
    {
        return new AInitFactor(
            cloneNode(this._lBrack_),
            cloneList(this._elementList_),
            cloneNode(this._rBrack_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInitFactor(this);
    }

    public TLBrack getLBrack()
    {
        return this._lBrack_;
    }

    public void setLBrack(TLBrack node)
    {
        if(this._lBrack_ != null)
        {
            this._lBrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrack_ = node;
    }

    public LinkedList<PElementList> getElementList()
    {
        return this._elementList_;
    }

    public void setElementList(List<?> list)
    {
        for(PElementList e : this._elementList_)
        {
            e.parent(null);
        }
        this._elementList_.clear();

        for(Object obj_e : list)
        {
            PElementList e = (PElementList) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._elementList_.add(e);
        }
    }

    public TRBrack getRBrack()
    {
        return this._rBrack_;
    }

    public void setRBrack(TRBrack node)
    {
        if(this._rBrack_ != null)
        {
            this._rBrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrack_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lBrack_)
            + toString(this._elementList_)
            + toString(this._rBrack_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lBrack_ == child)
        {
            this._lBrack_ = null;
            return;
        }

        if(this._elementList_.remove(child))
        {
            return;
        }

        if(this._rBrack_ == child)
        {
            this._rBrack_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lBrack_ == oldChild)
        {
            setLBrack((TLBrack) newChild);
            return;
        }

        for(ListIterator<PElementList> i = this._elementList_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PElementList) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rBrack_ == oldChild)
        {
            setRBrack((TRBrack) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
