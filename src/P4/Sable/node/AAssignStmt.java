/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import P4.CodeGenarator.SemanticException;
import P4.Sable.analysis.*;
import P4.contextualAnalysis.TypeException;

@SuppressWarnings("nls")
public final class AAssignStmt extends PStmt
{
    private PVal _var_;
    private TAssign _operation_;
    private PExpr _expr_;

    public AAssignStmt()
    {
        // Constructor
    }

    public AAssignStmt(
        @SuppressWarnings("hiding") PVal _var_,
        @SuppressWarnings("hiding") TAssign _operation_,
        @SuppressWarnings("hiding") PExpr _expr_)
    {
        // Constructor
        setVar(_var_);

        setOperation(_operation_);

        setExpr(_expr_);

    }

    @Override
    public Object clone()
    {
        return new AAssignStmt(
            cloneNode(this._var_),
            cloneNode(this._operation_),
            cloneNode(this._expr_));
    }

    @Override
    public void apply(Switch sw) throws TypeException, SemanticException {
        ((Analysis) sw).caseAAssignStmt(this);
    }

    public PVal getVar()
    {
        return this._var_;
    }

    public void setVar(PVal node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TAssign getOperation()
    {
        return this._operation_;
    }

    public void setOperation(TAssign node)
    {
        if(this._operation_ != null)
        {
            this._operation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._operation_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._operation_)
            + toString(this._expr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._operation_ == child)
        {
            this._operation_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((PVal) newChild);
            return;
        }

        if(this._operation_ == oldChild)
        {
            setOperation((TAssign) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
