/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import java.util.*;
import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AParamDclList extends PParamDclList
{
    private PParamDcl _paramDcl_;
    private final LinkedList<PExpandParam> _expandParam_ = new LinkedList<PExpandParam>();

    public AParamDclList()
    {
        // Constructor
    }

    public AParamDclList(
        @SuppressWarnings("hiding") PParamDcl _paramDcl_,
        @SuppressWarnings("hiding") List<?> _expandParam_)
    {
        // Constructor
        setParamDcl(_paramDcl_);

        setExpandParam(_expandParam_);

    }

    @Override
    public Object clone()
    {
        return new AParamDclList(
            cloneNode(this._paramDcl_),
            cloneList(this._expandParam_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParamDclList(this);
    }

    public PParamDcl getParamDcl()
    {
        return this._paramDcl_;
    }

    public void setParamDcl(PParamDcl node)
    {
        if(this._paramDcl_ != null)
        {
            this._paramDcl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramDcl_ = node;
    }

    public LinkedList<PExpandParam> getExpandParam()
    {
        return this._expandParam_;
    }

    public void setExpandParam(List<?> list)
    {
        for(PExpandParam e : this._expandParam_)
        {
            e.parent(null);
        }
        this._expandParam_.clear();

        for(Object obj_e : list)
        {
            PExpandParam e = (PExpandParam) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._expandParam_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._paramDcl_)
            + toString(this._expandParam_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._paramDcl_ == child)
        {
            this._paramDcl_ = null;
            return;
        }

        if(this._expandParam_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._paramDcl_ == oldChild)
        {
            setParamDcl((PParamDcl) newChild);
            return;
        }

        for(ListIterator<PExpandParam> i = this._expandParam_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpandParam) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
