/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AProg extends PProg
{
    private PSetup _setup_;
    private PMoves _moves_;
    private PTurn _turn_;
    private PEndCon _endCon_;
    private PMoveDclList _moveDclList_;

    public AProg()
    {
        // Constructor
    }

    public AProg(
        @SuppressWarnings("hiding") PSetup _setup_,
        @SuppressWarnings("hiding") PMoves _moves_,
        @SuppressWarnings("hiding") PTurn _turn_,
        @SuppressWarnings("hiding") PEndCon _endCon_,
        @SuppressWarnings("hiding") PMoveDclList _moveDclList_)
    {
        // Constructor
        setSetup(_setup_);

        setMoves(_moves_);

        setTurn(_turn_);

        setEndCon(_endCon_);

        setMoveDclList(_moveDclList_);

    }

    @Override
    public Object clone()
    {
        return new AProg(
            cloneNode(this._setup_),
            cloneNode(this._moves_),
            cloneNode(this._turn_),
            cloneNode(this._endCon_),
            cloneNode(this._moveDclList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProg(this);
    }

    public PSetup getSetup()
    {
        return this._setup_;
    }

    public void setSetup(PSetup node)
    {
        if(this._setup_ != null)
        {
            this._setup_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._setup_ = node;
    }

    public PMoves getMoves()
    {
        return this._moves_;
    }

    public void setMoves(PMoves node)
    {
        if(this._moves_ != null)
        {
            this._moves_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._moves_ = node;
    }

    public PTurn getTurn()
    {
        return this._turn_;
    }

    public void setTurn(PTurn node)
    {
        if(this._turn_ != null)
        {
            this._turn_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._turn_ = node;
    }

    public PEndCon getEndCon()
    {
        return this._endCon_;
    }

    public void setEndCon(PEndCon node)
    {
        if(this._endCon_ != null)
        {
            this._endCon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endCon_ = node;
    }

    public PMoveDclList getMoveDclList()
    {
        return this._moveDclList_;
    }

    public void setMoveDclList(PMoveDclList node)
    {
        if(this._moveDclList_ != null)
        {
            this._moveDclList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._moveDclList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._setup_)
            + toString(this._moves_)
            + toString(this._turn_)
            + toString(this._endCon_)
            + toString(this._moveDclList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._setup_ == child)
        {
            this._setup_ = null;
            return;
        }

        if(this._moves_ == child)
        {
            this._moves_ = null;
            return;
        }

        if(this._turn_ == child)
        {
            this._turn_ = null;
            return;
        }

        if(this._endCon_ == child)
        {
            this._endCon_ = null;
            return;
        }

        if(this._moveDclList_ == child)
        {
            this._moveDclList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._setup_ == oldChild)
        {
            setSetup((PSetup) newChild);
            return;
        }

        if(this._moves_ == oldChild)
        {
            setMoves((PMoves) newChild);
            return;
        }

        if(this._turn_ == oldChild)
        {
            setTurn((PTurn) newChild);
            return;
        }

        if(this._endCon_ == oldChild)
        {
            setEndCon((PEndCon) newChild);
            return;
        }

        if(this._moveDclList_ == oldChild)
        {
            setMoveDclList((PMoveDclList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
