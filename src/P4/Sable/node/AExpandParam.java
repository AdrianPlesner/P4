/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AExpandParam extends PExpandParam
{
    private TSeparator _separator_;
    private PParamDcl _paramDcl_;

    public AExpandParam()
    {
        // Constructor
    }

    public AExpandParam(
        @SuppressWarnings("hiding") TSeparator _separator_,
        @SuppressWarnings("hiding") PParamDcl _paramDcl_)
    {
        // Constructor
        setSeparator(_separator_);

        setParamDcl(_paramDcl_);

    }

    @Override
    public Object clone()
    {
        return new AExpandParam(
            cloneNode(this._separator_),
            cloneNode(this._paramDcl_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpandParam(this);
    }

    public TSeparator getSeparator()
    {
        return this._separator_;
    }

    public void setSeparator(TSeparator node)
    {
        if(this._separator_ != null)
        {
            this._separator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._separator_ = node;
    }

    public PParamDcl getParamDcl()
    {
        return this._paramDcl_;
    }

    public void setParamDcl(PParamDcl node)
    {
        if(this._paramDcl_ != null)
        {
            this._paramDcl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramDcl_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._separator_)
            + toString(this._paramDcl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._separator_ == child)
        {
            this._separator_ = null;
            return;
        }

        if(this._paramDcl_ == child)
        {
            this._paramDcl_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._separator_ == oldChild)
        {
            setSeparator((TSeparator) newChild);
            return;
        }

        if(this._paramDcl_ == oldChild)
        {
            setParamDcl((PParamDcl) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
