/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import java.util.*;
import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AIfStmt extends PIfStmt
{
    private TIf _if_;
    private PExpr _expr_;
    private PBlock _block_;
    private final LinkedList<PElseIf> _elseIf_ = new LinkedList<PElseIf>();
    private PElseStmt _elseStmt_;

    public AIfStmt()
    {
        // Constructor
    }

    public AIfStmt(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") PBlock _block_,
        @SuppressWarnings("hiding") List<?> _elseIf_,
        @SuppressWarnings("hiding") PElseStmt _elseStmt_)
    {
        // Constructor
        setIf(_if_);

        setExpr(_expr_);

        setBlock(_block_);

        setElseIf(_elseIf_);

        setElseStmt(_elseStmt_);

    }

    @Override
    public Object clone()
    {
        return new AIfStmt(
            cloneNode(this._if_),
            cloneNode(this._expr_),
            cloneNode(this._block_),
            cloneList(this._elseIf_),
            cloneNode(this._elseStmt_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStmt(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    public LinkedList<PElseIf> getElseIf()
    {
        return this._elseIf_;
    }

    public void setElseIf(List<?> list)
    {
        for(PElseIf e : this._elseIf_)
        {
            e.parent(null);
        }
        this._elseIf_.clear();

        for(Object obj_e : list)
        {
            PElseIf e = (PElseIf) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._elseIf_.add(e);
        }
    }

    public PElseStmt getElseStmt()
    {
        return this._elseStmt_;
    }

    public void setElseStmt(PElseStmt node)
    {
        if(this._elseStmt_ != null)
        {
            this._elseStmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseStmt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._expr_)
            + toString(this._block_)
            + toString(this._elseIf_)
            + toString(this._elseStmt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        if(this._elseIf_.remove(child))
        {
            return;
        }

        if(this._elseStmt_ == child)
        {
            this._elseStmt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        for(ListIterator<PElseIf> i = this._elseIf_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PElseIf) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._elseStmt_ == oldChild)
        {
            setElseStmt((PElseStmt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
