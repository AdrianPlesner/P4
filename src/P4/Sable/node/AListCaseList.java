/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AListCaseList extends PCaseList
{
    private PCaseStmt _caseStmt_;
    private PCaseList _caseList_;

    public AListCaseList()
    {
        // Constructor
    }

    public AListCaseList(
        @SuppressWarnings("hiding") PCaseStmt _caseStmt_,
        @SuppressWarnings("hiding") PCaseList _caseList_)
    {
        // Constructor
        setCaseStmt(_caseStmt_);

        setCaseList(_caseList_);

    }

    @Override
    public Object clone()
    {
        return new AListCaseList(
            cloneNode(this._caseStmt_),
            cloneNode(this._caseList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListCaseList(this);
    }

    public PCaseStmt getCaseStmt()
    {
        return this._caseStmt_;
    }

    public void setCaseStmt(PCaseStmt node)
    {
        if(this._caseStmt_ != null)
        {
            this._caseStmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._caseStmt_ = node;
    }

    public PCaseList getCaseList()
    {
        return this._caseList_;
    }

    public void setCaseList(PCaseList node)
    {
        if(this._caseList_ != null)
        {
            this._caseList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._caseList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._caseStmt_)
            + toString(this._caseList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._caseStmt_ == child)
        {
            this._caseStmt_ = null;
            return;
        }

        if(this._caseList_ == child)
        {
            this._caseList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._caseStmt_ == oldChild)
        {
            setCaseStmt((PCaseStmt) newChild);
            return;
        }

        if(this._caseList_ == oldChild)
        {
            setCaseList((PCaseList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
