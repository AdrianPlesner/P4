/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AForeachLoopExpr extends PLoopExpr
{
    private PType _type_;
    private TId _var_;
    private TIn _in_;
    private TId _collection_;

    public AForeachLoopExpr()
    {
        // Constructor
    }

    public AForeachLoopExpr(
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TId _var_,
        @SuppressWarnings("hiding") TIn _in_,
        @SuppressWarnings("hiding") TId _collection_)
    {
        // Constructor
        setType(_type_);

        setVar(_var_);

        setIn(_in_);

        setCollection(_collection_);

    }

    @Override
    public Object clone()
    {
        return new AForeachLoopExpr(
            cloneNode(this._type_),
            cloneNode(this._var_),
            cloneNode(this._in_),
            cloneNode(this._collection_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForeachLoopExpr(this);
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TId getVar()
    {
        return this._var_;
    }

    public void setVar(TId node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TIn getIn()
    {
        return this._in_;
    }

    public void setIn(TIn node)
    {
        if(this._in_ != null)
        {
            this._in_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._in_ = node;
    }

    public TId getCollection()
    {
        return this._collection_;
    }

    public void setCollection(TId node)
    {
        if(this._collection_ != null)
        {
            this._collection_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._collection_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._type_)
            + toString(this._var_)
            + toString(this._in_)
            + toString(this._collection_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._in_ == child)
        {
            this._in_ = null;
            return;
        }

        if(this._collection_ == child)
        {
            this._collection_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._var_ == oldChild)
        {
            setVar((TId) newChild);
            return;
        }

        if(this._in_ == oldChild)
        {
            setIn((TIn) newChild);
            return;
        }

        if(this._collection_ == oldChild)
        {
            setCollection((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
