/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import java.util.*;
import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AVal extends PVal
{
    private TId _id_;
    private PCall _call_;
    private final LinkedList<PValList> _valList_ = new LinkedList<PValList>();

    public AVal()
    {
        // Constructor
    }

    public AVal(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") PCall _call_,
        @SuppressWarnings("hiding") List<?> _valList_)
    {
        // Constructor
        setId(_id_);

        setCall(_call_);

        setValList(_valList_);

    }

    @Override
    public Object clone()
    {
        return new AVal(
            cloneNode(this._id_),
            cloneNode(this._call_),
            cloneList(this._valList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVal(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PCall getCall()
    {
        return this._call_;
    }

    public void setCall(PCall node)
    {
        if(this._call_ != null)
        {
            this._call_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._call_ = node;
    }

    public LinkedList<PValList> getValList()
    {
        return this._valList_;
    }

    public void setValList(List<?> list)
    {
        for(PValList e : this._valList_)
        {
            e.parent(null);
        }
        this._valList_.clear();

        for(Object obj_e : list)
        {
            PValList e = (PValList) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._valList_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._call_)
            + toString(this._valList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._call_ == child)
        {
            this._call_ = null;
            return;
        }

        if(this._valList_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._call_ == oldChild)
        {
            setCall((PCall) newChild);
            return;
        }

        for(ListIterator<PValList> i = this._valList_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PValList) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
