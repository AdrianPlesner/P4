/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class ASingleEquality extends PEquality
{
    private PRelation _relation_;

    public ASingleEquality()
    {
        // Constructor
    }

    public ASingleEquality(
        @SuppressWarnings("hiding") PRelation _relation_)
    {
        // Constructor
        setRelation(_relation_);

    }

    @Override
    public Object clone()
    {
        return new ASingleEquality(
            cloneNode(this._relation_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASingleEquality(this);
    }

    public PRelation getRelation()
    {
        return this._relation_;
    }

    public void setRelation(PRelation node)
    {
        if(this._relation_ != null)
        {
            this._relation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relation_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._relation_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._relation_ == child)
        {
            this._relation_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._relation_ == oldChild)
        {
            setRelation((PRelation) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
