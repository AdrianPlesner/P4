/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class ACard extends PCard
{
    private TCard _card_;
    private PClassBody _classBody_;

    public ACard()
    {
        // Constructor
    }

    public ACard(
        @SuppressWarnings("hiding") TCard _card_,
        @SuppressWarnings("hiding") PClassBody _classBody_)
    {
        // Constructor
        setCard(_card_);

        setClassBody(_classBody_);

    }

    @Override
    public Object clone()
    {
        return new ACard(
            cloneNode(this._card_),
            cloneNode(this._classBody_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACard(this);
    }

    public TCard getCard()
    {
        return this._card_;
    }

    public void setCard(TCard node)
    {
        if(this._card_ != null)
        {
            this._card_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._card_ = node;
    }

    public PClassBody getClassBody()
    {
        return this._classBody_;
    }

    public void setClassBody(PClassBody node)
    {
        if(this._classBody_ != null)
        {
            this._classBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._card_)
            + toString(this._classBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._card_ == child)
        {
            this._card_ = null;
            return;
        }

        if(this._classBody_ == child)
        {
            this._classBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._card_ == oldChild)
        {
            setCard((TCard) newChild);
            return;
        }

        if(this._classBody_ == oldChild)
        {
            setClassBody((PClassBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
