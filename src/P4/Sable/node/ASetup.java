/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import java.util.*;
import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class ASetup extends PSetup
{
    private TSetup _setup_;
    private TLBrack _lBrack_;
    private PCard _card_;
    private PPublic _public_;
    private PPrivate _private_;
    private final LinkedList<PStmt> _stmt_ = new LinkedList<PStmt>();
    private TRBrack _rBrack_;

    public ASetup()
    {
        // Constructor
    }

    public ASetup(
        @SuppressWarnings("hiding") TSetup _setup_,
        @SuppressWarnings("hiding") TLBrack _lBrack_,
        @SuppressWarnings("hiding") PCard _card_,
        @SuppressWarnings("hiding") PPublic _public_,
        @SuppressWarnings("hiding") PPrivate _private_,
        @SuppressWarnings("hiding") List<?> _stmt_,
        @SuppressWarnings("hiding") TRBrack _rBrack_)
    {
        // Constructor
        setSetup(_setup_);

        setLBrack(_lBrack_);

        setCard(_card_);

        setPublic(_public_);

        setPrivate(_private_);

        setStmt(_stmt_);

        setRBrack(_rBrack_);

    }

    @Override
    public Object clone()
    {
        return new ASetup(
            cloneNode(this._setup_),
            cloneNode(this._lBrack_),
            cloneNode(this._card_),
            cloneNode(this._public_),
            cloneNode(this._private_),
            cloneList(this._stmt_),
            cloneNode(this._rBrack_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASetup(this);
    }

    public TSetup getSetup()
    {
        return this._setup_;
    }

    public void setSetup(TSetup node)
    {
        if(this._setup_ != null)
        {
            this._setup_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._setup_ = node;
    }

    public TLBrack getLBrack()
    {
        return this._lBrack_;
    }

    public void setLBrack(TLBrack node)
    {
        if(this._lBrack_ != null)
        {
            this._lBrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrack_ = node;
    }

    public PCard getCard()
    {
        return this._card_;
    }

    public void setCard(PCard node)
    {
        if(this._card_ != null)
        {
            this._card_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._card_ = node;
    }

    public PPublic getPublic()
    {
        return this._public_;
    }

    public void setPublic(PPublic node)
    {
        if(this._public_ != null)
        {
            this._public_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._public_ = node;
    }

    public PPrivate getPrivate()
    {
        return this._private_;
    }

    public void setPrivate(PPrivate node)
    {
        if(this._private_ != null)
        {
            this._private_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._private_ = node;
    }

    public LinkedList<PStmt> getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(List<?> list)
    {
        for(PStmt e : this._stmt_)
        {
            e.parent(null);
        }
        this._stmt_.clear();

        for(Object obj_e : list)
        {
            PStmt e = (PStmt) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._stmt_.add(e);
        }
    }

    public TRBrack getRBrack()
    {
        return this._rBrack_;
    }

    public void setRBrack(TRBrack node)
    {
        if(this._rBrack_ != null)
        {
            this._rBrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrack_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._setup_)
            + toString(this._lBrack_)
            + toString(this._card_)
            + toString(this._public_)
            + toString(this._private_)
            + toString(this._stmt_)
            + toString(this._rBrack_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._setup_ == child)
        {
            this._setup_ = null;
            return;
        }

        if(this._lBrack_ == child)
        {
            this._lBrack_ = null;
            return;
        }

        if(this._card_ == child)
        {
            this._card_ = null;
            return;
        }

        if(this._public_ == child)
        {
            this._public_ = null;
            return;
        }

        if(this._private_ == child)
        {
            this._private_ = null;
            return;
        }

        if(this._stmt_.remove(child))
        {
            return;
        }

        if(this._rBrack_ == child)
        {
            this._rBrack_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._setup_ == oldChild)
        {
            setSetup((TSetup) newChild);
            return;
        }

        if(this._lBrack_ == oldChild)
        {
            setLBrack((TLBrack) newChild);
            return;
        }

        if(this._card_ == oldChild)
        {
            setCard((PCard) newChild);
            return;
        }

        if(this._public_ == oldChild)
        {
            setPublic((PPublic) newChild);
            return;
        }

        if(this._private_ == oldChild)
        {
            setPrivate((PPrivate) newChild);
            return;
        }

        for(ListIterator<PStmt> i = this._stmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rBrack_ == oldChild)
        {
            setRBrack((TRBrack) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
