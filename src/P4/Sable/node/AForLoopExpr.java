/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AForLoopExpr extends PLoopExpr
{
    private PExpr _init_;
    private TSemi _a_;
    private PExpr _condition_;
    private TSemi _b_;
    private PExpr _count_;

    public AForLoopExpr()
    {
        // Constructor
    }

    public AForLoopExpr(
        @SuppressWarnings("hiding") PExpr _init_,
        @SuppressWarnings("hiding") TSemi _a_,
        @SuppressWarnings("hiding") PExpr _condition_,
        @SuppressWarnings("hiding") TSemi _b_,
        @SuppressWarnings("hiding") PExpr _count_)
    {
        // Constructor
        setInit(_init_);

        setA(_a_);

        setCondition(_condition_);

        setB(_b_);

        setCount(_count_);

    }

    @Override
    public Object clone()
    {
        return new AForLoopExpr(
            cloneNode(this._init_),
            cloneNode(this._a_),
            cloneNode(this._condition_),
            cloneNode(this._b_),
            cloneNode(this._count_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForLoopExpr(this);
    }

    public PExpr getInit()
    {
        return this._init_;
    }

    public void setInit(PExpr node)
    {
        if(this._init_ != null)
        {
            this._init_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._init_ = node;
    }

    public TSemi getA()
    {
        return this._a_;
    }

    public void setA(TSemi node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public PExpr getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PExpr node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public TSemi getB()
    {
        return this._b_;
    }

    public void setB(TSemi node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    public PExpr getCount()
    {
        return this._count_;
    }

    public void setCount(PExpr node)
    {
        if(this._count_ != null)
        {
            this._count_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._count_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._init_)
            + toString(this._a_)
            + toString(this._condition_)
            + toString(this._b_)
            + toString(this._count_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._init_ == child)
        {
            this._init_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        if(this._count_ == child)
        {
            this._count_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._init_ == oldChild)
        {
            setInit((PExpr) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((TSemi) newChild);
            return;
        }

        if(this._condition_ == oldChild)
        {
            setCondition((PExpr) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((TSemi) newChild);
            return;
        }

        if(this._count_ == oldChild)
        {
            setCount((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
