/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AForLoopExpr extends PLoopExpr
{
    private PInitLoop _initLoop_;
    private TSemi _a_;
    private PExpr _expr_;
    private TSemi _b_;
    private PAssignValue _assignValue_;

    public AForLoopExpr()
    {
        // Constructor
    }

    public AForLoopExpr(
        @SuppressWarnings("hiding") PInitLoop _initLoop_,
        @SuppressWarnings("hiding") TSemi _a_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TSemi _b_,
        @SuppressWarnings("hiding") PAssignValue _assignValue_)
    {
        // Constructor
        setInitLoop(_initLoop_);

        setA(_a_);

        setExpr(_expr_);

        setB(_b_);

        setAssignValue(_assignValue_);

    }

    @Override
    public Object clone()
    {
        return new AForLoopExpr(
            cloneNode(this._initLoop_),
            cloneNode(this._a_),
            cloneNode(this._expr_),
            cloneNode(this._b_),
            cloneNode(this._assignValue_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForLoopExpr(this);
    }

    public PInitLoop getInitLoop()
    {
        return this._initLoop_;
    }

    public void setInitLoop(PInitLoop node)
    {
        if(this._initLoop_ != null)
        {
            this._initLoop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._initLoop_ = node;
    }

    public TSemi getA()
    {
        return this._a_;
    }

    public void setA(TSemi node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TSemi getB()
    {
        return this._b_;
    }

    public void setB(TSemi node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    public PAssignValue getAssignValue()
    {
        return this._assignValue_;
    }

    public void setAssignValue(PAssignValue node)
    {
        if(this._assignValue_ != null)
        {
            this._assignValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assignValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._initLoop_)
            + toString(this._a_)
            + toString(this._expr_)
            + toString(this._b_)
            + toString(this._assignValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._initLoop_ == child)
        {
            this._initLoop_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        if(this._assignValue_ == child)
        {
            this._assignValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._initLoop_ == oldChild)
        {
            setInitLoop((PInitLoop) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((TSemi) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((TSemi) newChild);
            return;
        }

        if(this._assignValue_ == oldChild)
        {
            setAssignValue((PAssignValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
