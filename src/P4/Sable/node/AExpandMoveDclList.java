/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AExpandMoveDclList extends PMoveDclList
{
    private PMethodDcl _methodDcl_;
    private PMoveDclList _moveDclList_;

    public AExpandMoveDclList()
    {
        // Constructor
    }

    public AExpandMoveDclList(
        @SuppressWarnings("hiding") PMethodDcl _methodDcl_,
        @SuppressWarnings("hiding") PMoveDclList _moveDclList_)
    {
        // Constructor
        setMethodDcl(_methodDcl_);

        setMoveDclList(_moveDclList_);

    }

    @Override
    public Object clone()
    {
        return new AExpandMoveDclList(
            cloneNode(this._methodDcl_),
            cloneNode(this._moveDclList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpandMoveDclList(this);
    }

    public PMethodDcl getMethodDcl()
    {
        return this._methodDcl_;
    }

    public void setMethodDcl(PMethodDcl node)
    {
        if(this._methodDcl_ != null)
        {
            this._methodDcl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodDcl_ = node;
    }

    public PMoveDclList getMoveDclList()
    {
        return this._moveDclList_;
    }

    public void setMoveDclList(PMoveDclList node)
    {
        if(this._moveDclList_ != null)
        {
            this._moveDclList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._moveDclList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._methodDcl_)
            + toString(this._moveDclList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._methodDcl_ == child)
        {
            this._methodDcl_ = null;
            return;
        }

        if(this._moveDclList_ == child)
        {
            this._moveDclList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._methodDcl_ == oldChild)
        {
            setMethodDcl((PMethodDcl) newChild);
            return;
        }

        if(this._moveDclList_ == oldChild)
        {
            setMoveDclList((PMoveDclList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
