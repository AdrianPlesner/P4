/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.node;

import P4.Sable.analysis.*;

@SuppressWarnings("nls")
public final class AForLoop extends PForLoop
{
    private TFor _for_;
    private PLoopExpr _loopExpr_;
    private PBlock _block_;

    public AForLoop()
    {
        // Constructor
    }

    public AForLoop(
        @SuppressWarnings("hiding") TFor _for_,
        @SuppressWarnings("hiding") PLoopExpr _loopExpr_,
        @SuppressWarnings("hiding") PBlock _block_)
    {
        // Constructor
        setFor(_for_);

        setLoopExpr(_loopExpr_);

        setBlock(_block_);

    }

    @Override
    public Object clone()
    {
        return new AForLoop(
            cloneNode(this._for_),
            cloneNode(this._loopExpr_),
            cloneNode(this._block_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForLoop(this);
    }

    public TFor getFor()
    {
        return this._for_;
    }

    public void setFor(TFor node)
    {
        if(this._for_ != null)
        {
            this._for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._for_ = node;
    }

    public PLoopExpr getLoopExpr()
    {
        return this._loopExpr_;
    }

    public void setLoopExpr(PLoopExpr node)
    {
        if(this._loopExpr_ != null)
        {
            this._loopExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._loopExpr_ = node;
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._for_)
            + toString(this._loopExpr_)
            + toString(this._block_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._for_ == child)
        {
            this._for_ = null;
            return;
        }

        if(this._loopExpr_ == child)
        {
            this._loopExpr_ = null;
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(this._loopExpr_ == oldChild)
        {
            setLoopExpr((PLoopExpr) newChild);
            return;
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
