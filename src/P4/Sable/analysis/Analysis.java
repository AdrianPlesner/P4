/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.analysis;

import P4.Sable.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProg(AProg node);
    void caseAIncludes(AIncludes node);
    void caseASetup(ASetup node);
    void caseACard(ACard node);
    void caseAClassBody(AClassBody node);
    void caseASubclass(ASubclass node);
    void caseAPublic(APublic node);
    void caseAPrivate(APrivate node);
    void caseAMoves(AMoves node);
    void caseADcl(ADcl node);
    void caseASingleDcl(ASingleDcl node);
    void caseADclList(ADclList node);
    void caseAInit(AInit node);
    void caseAExpandExpr(AExpandExpr node);
    void caseASingleExpr(ASingleExpr node);
    void caseAExpandEquality(AExpandEquality node);
    void caseASingleEquality(ASingleEquality node);
    void caseAExpandRelation(AExpandRelation node);
    void caseASingleRelation(ASingleRelation node);
    void caseAExpandAddExpr(AExpandAddExpr node);
    void caseASingleAddExpr(ASingleAddExpr node);
    void caseAExpandTerm(AExpandTerm node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAExpandFactor(AExpandFactor node);
    void caseALiteralFactor(ALiteralFactor node);
    void caseAValFactor(AValFactor node);
    void caseAInitFactor(AInitFactor node);
    void caseAParens(AParens node);
    void caseAIntLiteral(AIntLiteral node);
    void caseAFloatLiteral(AFloatLiteral node);
    void caseAStringLiteral(AStringLiteral node);
    void caseABoolLiteral(ABoolLiteral node);
    void caseAElementList(AElementList node);
    void caseAExpandElement(AExpandElement node);
    void caseASingleElement(ASingleElement node);
    void caseAVal(AVal node);
    void caseAValList(AValList node);
    void caseACall(ACall node);
    void caseAParamList(AParamList node);
    void caseAParam(AParam node);
    void caseAMethodDcl(AMethodDcl node);
    void caseAParamDclList(AParamDclList node);
    void caseAExpandParam(AExpandParam node);
    void caseAParamDcl(AParamDcl node);
    void caseAType(AType node);
    void caseAList(AList node);
    void caseAReturnStmt(AReturnStmt node);
    void caseASelectStmt(ASelectStmt node);
    void caseADclStmt(ADclStmt node);
    void caseALoopStmt(ALoopStmt node);
    void caseAAssignStmt(AAssignStmt node);
    void caseACallStmt(ACallStmt node);
    void caseAIfSelectStmt(AIfSelectStmt node);
    void caseASwitchSelectStmt(ASwitchSelectStmt node);
    void caseABlock(ABlock node);
    void caseAIfStmt(AIfStmt node);
    void caseAElseIf(AElseIf node);
    void caseAElseStmt(AElseStmt node);
    void caseASwitchStmt(ASwitchStmt node);
    void caseACase(ACase node);
    void caseACaseCaseStmt(ACaseCaseStmt node);
    void caseADefaultCaseStmt(ADefaultCaseStmt node);
    void caseAWhileLoopStmt(AWhileLoopStmt node);
    void caseAForLoopStmt(AForLoopStmt node);
    void caseAWhileLoop(AWhileLoop node);
    void caseAForLoop(AForLoop node);
    void caseAForeachLoopExpr(AForeachLoopExpr node);
    void caseAForLoopExpr(AForLoopExpr node);
    void caseADeclareInitLoop(ADeclareInitLoop node);
    void caseAAssignInitLoop(AAssignInitLoop node);
    void caseAAssignValue(AAssignValue node);
    void caseATurn(ATurn node);
    void caseAEndCon(AEndCon node);
    void caseAEnd(AEnd node);

    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseTBoolLiteral(TBoolLiteral node);
    void caseTAddOp(TAddOp node);
    void caseTMultOp(TMultOp node);
    void caseTIntLiteral(TIntLiteral node);
    void caseTFloatLiteral(TFloatLiteral node);
    void caseTString(TString node);
    void caseTBoolOp(TBoolOp node);
    void caseTRelationOp(TRelationOp node);
    void caseTAssign(TAssign node);
    void caseTEqualOp(TEqualOp node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBrack(TLBrack node);
    void caseTRBrack(TRBrack node);
    void caseTSetup(TSetup node);
    void caseTPublic(TPublic node);
    void caseTPrivate(TPrivate node);
    void caseTSeparator(TSeparator node);
    void caseTDot(TDot node);
    void caseTMoves(TMoves node);
    void caseTLBox(TLBox node);
    void caseTRBox(TRBox node);
    void caseTReturn(TReturn node);
    void caseTSemi(TSemi node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTSwitch(TSwitch node);
    void caseTCase(TCase node);
    void caseTDefault(TDefault node);
    void caseTColon(TColon node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTForeach(TForeach node);
    void caseTTurn(TTurn node);
    void caseTEndCon(TEndCon node);
    void caseTIn(TIn node);
    void caseTCard(TCard node);
    void caseTLArr(TLArr node);
    void caseTRArr(TRArr node);
    void caseTList(TList node);
    void caseTTypeof(TTypeof node);
    void caseTFun(TFun node);
    void caseTInc(TInc node);
    void caseTSub(TSub node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
