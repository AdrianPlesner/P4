/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.analysis;

import java.util.*;
import P4.Sable.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASetup(ASetup node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPublic(APublic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrivate(APrivate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoves(AMoves node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpandDclList(AExpandDclList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyDclList(AEmptyDclList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADcl(ADcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitInit(AInitInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyInit(AEmptyInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpandExpr(AExpandExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleExpr(ASingleExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpandEquality(AExpandEquality node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleEquality(ASingleEquality node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpandRelation(AExpandRelation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleRelation(ASingleRelation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpandAddExpr(AExpandAddExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleAddExpr(ASingleAddExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpandTerm(AExpandTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpandFactor(AExpandFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALiteralFactor(ALiteralFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValFactor(AValFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitFactor(AInitFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParens(AParens node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntLiteral(AIntLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatLiteral(AFloatLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolLiteral(ABoolLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitList(AInitList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpandElementList(AExpandElementList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyElementList(AEmptyElementList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVal(AVal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpandValList(AExpandValList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyValList(AEmptyValList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallCall(ACallCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyCall(AEmptyCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParamList(AParamList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoveDclList(AMoveDclList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDcl(AMethodDcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpandParamDclList(AExpandParamDclList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleParamDclList(ASingleParamDclList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleParamDcl(ASingleParamDcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyParamDcl(AEmptyParamDcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeType(ATypeType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACollectionType(ACollectionType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayCollection(AArrayCollection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListCollection(AListCollection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArray(AArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAList(AList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpandStmtList(AExpandStmtList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyStmtList(AEmptyStmtList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleReturnStmt(ASingleReturnStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyReturnStmt(AEmptyReturnStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASelectStmt(ASelectStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADclStmt(ADclStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALoopStmt(ALoopStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallStmt(ACallStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfSelectStmt(AIfSelectStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchSelectStmt(ASwitchSelectStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseifElseStmt(AElseifElseStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseElseStmt(AElseElseStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseStmt(AElseStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchStmt(ASwitchStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListCaseList(AListCaseList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefaultCaseList(ADefaultCaseList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyCaseList(AEmptyCaseList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaseStmt(ACaseStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefaultStmt(ADefaultStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileLoopStmt(AWhileLoopStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForLoopStmt(AForLoopStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileLoop(AWhileLoop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForLoop(AForLoop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForeachLoopExpr(AForeachLoopExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForLoopExpr(AForLoopExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATurn(ATurn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEndCon(AEndCon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolLiteral(TBoolLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAddOp(TAddOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultOp(TMultOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntLiteral(TIntLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatLiteral(TFloatLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolOp(TBoolOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRelationOp(TRelationOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqualOp(TEqualOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLParen(TLParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRParen(TRParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrack(TLBrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrack(TRBrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSetup(TSetup node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrivate(TPrivate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSeparator(TSeparator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMoves(TMoves node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBox(TLBox node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBox(TRBox node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTForeach(TForeach node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTurn(TTurn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndCon(TEndCon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTType(TType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLArr(TLArr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRArr(TRArr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTList(TList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTypeof(TTypeof node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFun(TFun node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
