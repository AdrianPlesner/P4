/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.analysis;

import java.util.*;
import P4.Sable.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProg().apply(this);
        outStart(node);
    }

    public void inAProg(AProg node)
    {
        defaultIn(node);
    }

    public void outAProg(AProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        inAProg(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getIncludes());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        outAProg(node);
    }

    public void inAListExpr(AListExpr node)
    {
        defaultIn(node);
    }

    public void outAListExpr(AListExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExpr(AListExpr node)
    {
        inAListExpr(node);
        {
            List<PElement> copy = new ArrayList<PElement>(node.getElements());
            Collections.reverse(copy);
            for(PElement e : copy)
            {
                e.apply(this);
            }
        }
        outAListExpr(node);
    }

    public void inAMultOpExpr(AMultOpExpr node)
    {
        defaultIn(node);
    }

    public void outAMultOpExpr(AMultOpExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOpExpr(AMultOpExpr node)
    {
        inAMultOpExpr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getOperator() != null)
        {
            node.getOperator().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMultOpExpr(node);
    }

    public void inALiteralExpr(ALiteralExpr node)
    {
        defaultIn(node);
    }

    public void outALiteralExpr(ALiteralExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralExpr(ALiteralExpr node)
    {
        inALiteralExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outALiteralExpr(node);
    }

    public void inAValueExpr(AValueExpr node)
    {
        defaultIn(node);
    }

    public void outAValueExpr(AValueExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueExpr(AValueExpr node)
    {
        inAValueExpr(node);
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        outAValueExpr(node);
    }

    public void inAAddOpExpr(AAddOpExpr node)
    {
        defaultIn(node);
    }

    public void outAAddOpExpr(AAddOpExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddOpExpr(AAddOpExpr node)
    {
        inAAddOpExpr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getOperator() != null)
        {
            node.getOperator().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAAddOpExpr(node);
    }

    public void inARelationExpr(ARelationExpr node)
    {
        defaultIn(node);
    }

    public void outARelationExpr(ARelationExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationExpr(ARelationExpr node)
    {
        inARelationExpr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getOperator() != null)
        {
            node.getOperator().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outARelationExpr(node);
    }

    public void inAEqualityExpr(AEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outAEqualityExpr(AEqualityExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualityExpr(AEqualityExpr node)
    {
        inAEqualityExpr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getOperator() != null)
        {
            node.getOperator().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAEqualityExpr(node);
    }

    public void inABoolOpExpr(ABoolOpExpr node)
    {
        defaultIn(node);
    }

    public void outABoolOpExpr(ABoolOpExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolOpExpr(ABoolOpExpr node)
    {
        inABoolOpExpr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getOperator() != null)
        {
            node.getOperator().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outABoolOpExpr(node);
    }

    public void inAIntLiteral(AIntLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntLiteral(AIntLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntLiteral(AIntLiteral node)
    {
        inAIntLiteral(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAIntLiteral(node);
    }

    public void inAFloatLiteral(AFloatLiteral node)
    {
        defaultIn(node);
    }

    public void outAFloatLiteral(AFloatLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatLiteral(AFloatLiteral node)
    {
        inAFloatLiteral(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAFloatLiteral(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inABoolLiteral(ABoolLiteral node)
    {
        defaultIn(node);
    }

    public void outABoolLiteral(ABoolLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolLiteral(ABoolLiteral node)
    {
        inABoolLiteral(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outABoolLiteral(node);
    }

    public void inAElement(AElement node)
    {
        defaultIn(node);
    }

    public void outAElement(AElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElement(AElement node)
    {
        inAElement(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getValues());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAElement(node);
    }

    public void inAVal(AVal node)
    {
        defaultIn(node);
    }

    public void outAVal(AVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVal(AVal node)
    {
        inAVal(node);
        {
            List<PCallField> copy = new ArrayList<PCallField>(node.getCallField());
            Collections.reverse(copy);
            for(PCallField e : copy)
            {
                e.apply(this);
            }
        }
        outAVal(node);
    }

    public void inAFieldCallField(AFieldCallField node)
    {
        defaultIn(node);
    }

    public void outAFieldCallField(AFieldCallField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldCallField(AFieldCallField node)
    {
        inAFieldCallField(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFieldCallField(node);
    }

    public void inACallCallField(ACallCallField node)
    {
        defaultIn(node);
    }

    public void outACallCallField(ACallCallField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallCallField(ACallCallField node)
    {
        inACallCallField(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getParams());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACallCallField(node);
    }
}
