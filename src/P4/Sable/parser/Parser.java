/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.parser;

import P4.Sable.lexer.*;
import P4.Sable.node.*;
import P4.Sable.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProg */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ASetup */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce APublic */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce APrivate */
            {
                ArrayList<Object> list = new3();
                push(goTo(3), list, false);
            }
            break;
            case 4: /* reduce AMoves */
            {
                ArrayList<Object> list = new4();
                push(goTo(4), list, false);
            }
            break;
            case 5: /* reduce AExpandDclList */
            {
                ArrayList<Object> list = new5();
                push(goTo(5), list, false);
            }
            break;
            case 6: /* reduce AEmptyDclList */
            {
                ArrayList<Object> list = new6();
                push(goTo(5), list, false);
            }
            break;
            case 7: /* reduce ADcl */
            {
                ArrayList<Object> list = new7();
                push(goTo(6), list, false);
            }
            break;
            case 8: /* reduce AInitInit */
            {
                ArrayList<Object> list = new8();
                push(goTo(7), list, false);
            }
            break;
            case 9: /* reduce AEmptyInit */
            {
                ArrayList<Object> list = new9();
                push(goTo(7), list, false);
            }
            break;
            case 10: /* reduce AExpandExpr */
            {
                ArrayList<Object> list = new10();
                push(goTo(8), list, false);
            }
            break;
            case 11: /* reduce ASingleExpr */
            {
                ArrayList<Object> list = new11();
                push(goTo(8), list, false);
            }
            break;
            case 12: /* reduce AExpandEquality */
            {
                ArrayList<Object> list = new12();
                push(goTo(9), list, false);
            }
            break;
            case 13: /* reduce ASingleEquality */
            {
                ArrayList<Object> list = new13();
                push(goTo(9), list, false);
            }
            break;
            case 14: /* reduce AExpandRelation */
            {
                ArrayList<Object> list = new14();
                push(goTo(10), list, false);
            }
            break;
            case 15: /* reduce ASingleRelation */
            {
                ArrayList<Object> list = new15();
                push(goTo(10), list, false);
            }
            break;
            case 16: /* reduce AExpandAddExpr */
            {
                ArrayList<Object> list = new16();
                push(goTo(11), list, false);
            }
            break;
            case 17: /* reduce ASingleAddExpr */
            {
                ArrayList<Object> list = new17();
                push(goTo(11), list, false);
            }
            break;
            case 18: /* reduce AExpandTerm */
            {
                ArrayList<Object> list = new18();
                push(goTo(12), list, false);
            }
            break;
            case 19: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new19();
                push(goTo(12), list, false);
            }
            break;
            case 20: /* reduce AExpandFactor */
            {
                ArrayList<Object> list = new20();
                push(goTo(13), list, false);
            }
            break;
            case 21: /* reduce ALiteralFactor */
            {
                ArrayList<Object> list = new21();
                push(goTo(13), list, false);
            }
            break;
            case 22: /* reduce AValFactor */
            {
                ArrayList<Object> list = new22();
                push(goTo(13), list, false);
            }
            break;
            case 23: /* reduce AInitFactor */
            {
                ArrayList<Object> list = new23();
                push(goTo(13), list, false);
            }
            break;
            case 24: /* reduce AParens */
            {
                ArrayList<Object> list = new24();
                push(goTo(14), list, false);
            }
            break;
            case 25: /* reduce AIntLiteral */
            {
                ArrayList<Object> list = new25();
                push(goTo(15), list, false);
            }
            break;
            case 26: /* reduce AFloatLiteral */
            {
                ArrayList<Object> list = new26();
                push(goTo(15), list, false);
            }
            break;
            case 27: /* reduce AStringLiteral */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list, false);
            }
            break;
            case 28: /* reduce ABoolLiteral */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list, false);
            }
            break;
            case 29: /* reduce AInitList */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list, false);
            }
            break;
            case 30: /* reduce AExpandElementList */
            {
                ArrayList<Object> list = new30();
                push(goTo(17), list, false);
            }
            break;
            case 31: /* reduce AEmptyElementList */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list, false);
            }
            break;
            case 32: /* reduce AVal */
            {
                ArrayList<Object> list = new32();
                push(goTo(18), list, false);
            }
            break;
            case 33: /* reduce AExpandValList */
            {
                ArrayList<Object> list = new33();
                push(goTo(19), list, false);
            }
            break;
            case 34: /* reduce AEmptyValList */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list, false);
            }
            break;
            case 35: /* reduce ACallCall */
            {
                ArrayList<Object> list = new35();
                push(goTo(20), list, false);
            }
            break;
            case 36: /* reduce AEmptyCall */
            {
                ArrayList<Object> list = new36();
                push(goTo(20), list, false);
            }
            break;
            case 37: /* reduce AAparamlist1ParamList */
            {
                ArrayList<Object> list = new37();
                push(goTo(21), list, false);
            }
            break;
            case 38: /* reduce AAparamlist2ParamList */
            {
                ArrayList<Object> list = new38();
                push(goTo(21), list, false);
            }
            break;
            case 39: /* reduce AAparamlist3ParamList */
            {
                ArrayList<Object> list = new39();
                push(goTo(21), list, false);
            }
            break;
            case 40: /* reduce AAparamlist4ParamList */
            {
                ArrayList<Object> list = new40();
                push(goTo(21), list, false);
            }
            break;
            case 41: /* reduce AParam */
            {
                ArrayList<Object> list = new41();
                push(goTo(22), list, false);
            }
            break;
            case 42: /* reduce AMoveDclList */
            {
                ArrayList<Object> list = new42();
                push(goTo(23), list, false);
            }
            break;
            case 43: /* reduce AMethodDcl */
            {
                ArrayList<Object> list = new43();
                push(goTo(24), list, false);
            }
            break;
            case 44: /* reduce AExpandParamDclList */
            {
                ArrayList<Object> list = new44();
                push(goTo(25), list, false);
            }
            break;
            case 45: /* reduce ASingleParamDclList */
            {
                ArrayList<Object> list = new45();
                push(goTo(25), list, false);
            }
            break;
            case 46: /* reduce ASingleParamDcl */
            {
                ArrayList<Object> list = new46();
                push(goTo(26), list, false);
            }
            break;
            case 47: /* reduce AEmptyParamDcl */
            {
                ArrayList<Object> list = new47();
                push(goTo(26), list, false);
            }
            break;
            case 48: /* reduce ATypeType */
            {
                ArrayList<Object> list = new48();
                push(goTo(27), list, false);
            }
            break;
            case 49: /* reduce ACollectionType */
            {
                ArrayList<Object> list = new49();
                push(goTo(27), list, false);
            }
            break;
            case 50: /* reduce AArrayCollection */
            {
                ArrayList<Object> list = new50();
                push(goTo(28), list, false);
            }
            break;
            case 51: /* reduce AListCollection */
            {
                ArrayList<Object> list = new51();
                push(goTo(28), list, false);
            }
            break;
            case 52: /* reduce AArray */
            {
                ArrayList<Object> list = new52();
                push(goTo(29), list, false);
            }
            break;
            case 53: /* reduce AList */
            {
                ArrayList<Object> list = new53();
                push(goTo(30), list, false);
            }
            break;
            case 54: /* reduce AExpandStmtList */
            {
                ArrayList<Object> list = new54();
                push(goTo(31), list, false);
            }
            break;
            case 55: /* reduce AEmptyStmtList */
            {
                ArrayList<Object> list = new55();
                push(goTo(31), list, false);
            }
            break;
            case 56: /* reduce ASingleReturnStmt */
            {
                ArrayList<Object> list = new56();
                push(goTo(32), list, false);
            }
            break;
            case 57: /* reduce AEmptyReturnStmt */
            {
                ArrayList<Object> list = new57();
                push(goTo(32), list, false);
            }
            break;
            case 58: /* reduce ASelectStmt */
            {
                ArrayList<Object> list = new58();
                push(goTo(33), list, false);
            }
            break;
            case 59: /* reduce ADclStmt */
            {
                ArrayList<Object> list = new59();
                push(goTo(33), list, false);
            }
            break;
            case 60: /* reduce ALoopStmt */
            {
                ArrayList<Object> list = new60();
                push(goTo(33), list, false);
            }
            break;
            case 61: /* reduce ACallStmt */
            {
                ArrayList<Object> list = new61();
                push(goTo(33), list, false);
            }
            break;
            case 62: /* reduce AIfSelectStmt */
            {
                ArrayList<Object> list = new62();
                push(goTo(34), list, false);
            }
            break;
            case 63: /* reduce ASwitchSelectStmt */
            {
                ArrayList<Object> list = new63();
                push(goTo(34), list, false);
            }
            break;
            case 64: /* reduce ABlock */
            {
                ArrayList<Object> list = new64();
                push(goTo(35), list, false);
            }
            break;
            case 65: /* reduce AIfStmt */
            {
                ArrayList<Object> list = new65();
                push(goTo(36), list, false);
            }
            break;
            case 66: /* reduce AElseifElseStmt */
            {
                ArrayList<Object> list = new66();
                push(goTo(37), list, false);
            }
            break;
            case 67: /* reduce AElseElseStmt */
            {
                ArrayList<Object> list = new67();
                push(goTo(37), list, false);
            }
            break;
            case 68: /* reduce AElseStmt */
            {
                ArrayList<Object> list = new68();
                push(goTo(37), list, false);
            }
            break;
            case 69: /* reduce ASwitchStmt */
            {
                ArrayList<Object> list = new69();
                push(goTo(38), list, false);
            }
            break;
            case 70: /* reduce AListCaseList */
            {
                ArrayList<Object> list = new70();
                push(goTo(39), list, false);
            }
            break;
            case 71: /* reduce ADefaultCaseList */
            {
                ArrayList<Object> list = new71();
                push(goTo(39), list, false);
            }
            break;
            case 72: /* reduce AEmptyCaseList */
            {
                ArrayList<Object> list = new72();
                push(goTo(39), list, false);
            }
            break;
            case 73: /* reduce ACaseStmt */
            {
                ArrayList<Object> list = new73();
                push(goTo(40), list, false);
            }
            break;
            case 74: /* reduce ADefaultStmt */
            {
                ArrayList<Object> list = new74();
                push(goTo(41), list, false);
            }
            break;
            case 75: /* reduce AWhileLoopStmt */
            {
                ArrayList<Object> list = new75();
                push(goTo(42), list, false);
            }
            break;
            case 76: /* reduce AForLoopStmt */
            {
                ArrayList<Object> list = new76();
                push(goTo(42), list, false);
            }
            break;
            case 77: /* reduce AWhileLoop */
            {
                ArrayList<Object> list = new77();
                push(goTo(43), list, false);
            }
            break;
            case 78: /* reduce AForLoop */
            {
                ArrayList<Object> list = new78();
                push(goTo(44), list, false);
            }
            break;
            case 79: /* reduce AForeachLoopExpr */
            {
                ArrayList<Object> list = new79();
                push(goTo(45), list, false);
            }
            break;
            case 80: /* reduce AForLoopExpr */
            {
                ArrayList<Object> list = new80();
                push(goTo(45), list, false);
            }
            break;
            case 81: /* reduce ATurn */
            {
                ArrayList<Object> list = new81();
                push(goTo(46), list, false);
            }
            break;
            case 82: /* reduce AEndCon */
            {
                ArrayList<Object> list = new82();
                push(goTo(47), list, false);
            }
            break;
            case 83: /* reduce ATerminal$Param */
            {
                ArrayList<Object> list = new83();
                push(goTo(48), list, true);
            }
            break;
            case 84: /* reduce ANonTerminal$Param */
            {
                ArrayList<Object> list = new84();
                push(goTo(48), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        PSetup psetupNode2;
        PMoves pmovesNode3;
        PTurn pturnNode4;
        PEndCon pendconNode5;
        PMoveDclList pmovedcllistNode6;
        psetupNode2 = (PSetup)nodeArrayList1.get(0);
        pmovesNode3 = (PMoves)nodeArrayList2.get(0);
        pturnNode4 = (PTurn)nodeArrayList3.get(0);
        pendconNode5 = (PEndCon)nodeArrayList4.get(0);
        pmovedcllistNode6 = (PMoveDclList)nodeArrayList5.get(0);

        pprogNode1 = new AProg(psetupNode2, pmovesNode3, pturnNode4, pendconNode5, pmovedcllistNode6);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ASetup */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetup psetupNode1;
        {
            // Block
        TSetup tsetupNode2;
        TLBrack tlbrackNode3;
        PStmtList pstmtlistNode4;
        PPublic ppublicNode5;
        PPrivate pprivateNode6;
        TRBrack trbrackNode7;
        tsetupNode2 = (TSetup)nodeArrayList1.get(0);
        tlbrackNode3 = (TLBrack)nodeArrayList2.get(0);
        pstmtlistNode4 = (PStmtList)nodeArrayList3.get(0);
        ppublicNode5 = (PPublic)nodeArrayList4.get(0);
        pprivateNode6 = (PPrivate)nodeArrayList5.get(0);
        trbrackNode7 = (TRBrack)nodeArrayList6.get(0);

        psetupNode1 = new ASetup(tsetupNode2, tlbrackNode3, pstmtlistNode4, ppublicNode5, pprivateNode6, trbrackNode7);
        }
	nodeList.add(psetupNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce APublic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPublic ppublicNode1;
        {
            // Block
        TPublic tpublicNode2;
        PBlock pblockNode3;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        ppublicNode1 = new APublic(tpublicNode2, pblockNode3);
        }
	nodeList.add(ppublicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce APrivate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrivate pprivateNode1;
        {
            // Block
        TPrivate tprivateNode2;
        PBlock pblockNode3;
        tprivateNode2 = (TPrivate)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        pprivateNode1 = new APrivate(tprivateNode2, pblockNode3);
        }
	nodeList.add(pprivateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMoves */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMoves pmovesNode1;
        {
            // Block
        TMoves tmovesNode2;
        PMoveDclList pmovedcllistNode3;
        tmovesNode2 = (TMoves)nodeArrayList1.get(0);
        pmovedcllistNode3 = (PMoveDclList)nodeArrayList2.get(0);

        pmovesNode1 = new AMoves(tmovesNode2, pmovedcllistNode3);
        }
	nodeList.add(pmovesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AExpandDclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDclList pdcllistNode1;
        {
            // Block
        TId tidNode2;
        PInit pinitNode3;
        TSeparator tseparatorNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pinitNode3 = (PInit)nodeArrayList2.get(0);
        tseparatorNode4 = (TSeparator)nodeArrayList3.get(0);

        pdcllistNode1 = new AExpandDclList(tidNode2, pinitNode3, tseparatorNode4);
        }
	nodeList.add(pdcllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AEmptyDclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDclList pdcllistNode1;
        {
            // Block

        pdcllistNode1 = new AEmptyDclList();
        }
	nodeList.add(pdcllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDcl pdclNode1;
        {
            // Block
        PType ptypeNode2;
        PDclList pdcllistNode3;
        TSemi tsemiNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pdcllistNode3 = (PDclList)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pdclNode1 = new ADcl(ptypeNode2, pdcllistNode3, tsemiNode4);
        }
	nodeList.add(pdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AInitInit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInit pinitNode1;
        {
            // Block
        TAssign tassignNode2;
        PExpr pexprNode3;
        tassignNode2 = (TAssign)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pinitNode1 = new AInitInit(tassignNode2, pexprNode3);
        }
	nodeList.add(pinitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AEmptyInit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PInit pinitNode1;
        {
            // Block

        pinitNode1 = new AEmptyInit();
        }
	nodeList.add(pinitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AExpandExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TBoolOp tboolopNode3;
        PEquality pequalityNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tboolopNode3 = (TBoolOp)nodeArrayList2.get(0);
        pequalityNode4 = (PEquality)nodeArrayList3.get(0);

        pexprNode1 = new AExpandExpr(pexprNode2, tboolopNode3, pequalityNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ASingleExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PEquality pequalityNode2;
        pequalityNode2 = (PEquality)nodeArrayList1.get(0);

        pexprNode1 = new ASingleExpr(pequalityNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AExpandEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEquality pequalityNode1;
        {
            // Block
        PEquality pequalityNode2;
        TEqualOp tequalopNode3;
        PRelation prelationNode4;
        pequalityNode2 = (PEquality)nodeArrayList1.get(0);
        tequalopNode3 = (TEqualOp)nodeArrayList2.get(0);
        prelationNode4 = (PRelation)nodeArrayList3.get(0);

        pequalityNode1 = new AExpandEquality(pequalityNode2, tequalopNode3, prelationNode4);
        }
	nodeList.add(pequalityNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASingleEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEquality pequalityNode1;
        {
            // Block
        PRelation prelationNode2;
        prelationNode2 = (PRelation)nodeArrayList1.get(0);

        pequalityNode1 = new ASingleEquality(prelationNode2);
        }
	nodeList.add(pequalityNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AExpandRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelation prelationNode1;
        {
            // Block
        PRelation prelationNode2;
        TRelationOp trelationopNode3;
        PAddExpr paddexprNode4;
        prelationNode2 = (PRelation)nodeArrayList1.get(0);
        trelationopNode3 = (TRelationOp)nodeArrayList2.get(0);
        paddexprNode4 = (PAddExpr)nodeArrayList3.get(0);

        prelationNode1 = new AExpandRelation(prelationNode2, trelationopNode3, paddexprNode4);
        }
	nodeList.add(prelationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ASingleRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelation prelationNode1;
        {
            // Block
        PAddExpr paddexprNode2;
        paddexprNode2 = (PAddExpr)nodeArrayList1.get(0);

        prelationNode1 = new ASingleRelation(paddexprNode2);
        }
	nodeList.add(prelationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AExpandAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddExpr paddexprNode1;
        {
            // Block
        PAddExpr paddexprNode2;
        TAddOp taddopNode3;
        PTerm ptermNode4;
        paddexprNode2 = (PAddExpr)nodeArrayList1.get(0);
        taddopNode3 = (TAddOp)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        paddexprNode1 = new AExpandAddExpr(paddexprNode2, taddopNode3, ptermNode4);
        }
	nodeList.add(paddexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ASingleAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddExpr paddexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        paddexprNode1 = new ASingleAddExpr(ptermNode2);
        }
	nodeList.add(paddexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AExpandTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMultOp tmultopNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultopNode3 = (TMultOp)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AExpandTerm(ptermNode2, tmultopNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExpandFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PParens pparensNode2;
        pparensNode2 = (PParens)nodeArrayList1.get(0);

        pfactorNode1 = new AExpandFactor(pparensNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ALiteralFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pfactorNode1 = new ALiteralFactor(pliteralNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AValFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PVal pvalNode2;
        pvalNode2 = (PVal)nodeArrayList1.get(0);

        pfactorNode1 = new AValFactor(pvalNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AInitFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PInitList pinitlistNode2;
        pinitlistNode2 = (PInitList)nodeArrayList1.get(0);

        pfactorNode1 = new AInitFactor(pinitlistNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AParens */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParens pparensNode1;
        {
            // Block
        TLParen tlparenNode2;
        PExpr pexprNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        pparensNode1 = new AParens(tlparenNode2, pexprNode3, trparenNode4);
        }
	nodeList.add(pparensNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIntLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TIntLiteral tintliteralNode2;
        tintliteralNode2 = (TIntLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AIntLiteral(tintliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFloatLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TFloatLiteral tfloatliteralNode2;
        tfloatliteralNode2 = (TFloatLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AFloatLiteral(tfloatliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AStringLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pliteralNode1 = new AStringLiteral(tstringNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ABoolLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TBoolLiteral tboolliteralNode2;
        tboolliteralNode2 = (TBoolLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ABoolLiteral(tboolliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AInitList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitList pinitlistNode1;
        {
            // Block
        TLBrack tlbrackNode2;
        PElementList pelementlistNode3;
        TRBrack trbrackNode4;
        tlbrackNode2 = (TLBrack)nodeArrayList1.get(0);
        pelementlistNode3 = (PElementList)nodeArrayList2.get(0);
        trbrackNode4 = (TRBrack)nodeArrayList3.get(0);

        pinitlistNode1 = new AInitList(tlbrackNode2, pelementlistNode3, trbrackNode4);
        }
	nodeList.add(pinitlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AExpandElementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElementList pelementlistNode1;
        {
            // Block
        PParamList pparamlistNode2;
        TSeparator tseparatorNode3;
        PElementList pelementlistNode4;
        pparamlistNode2 = (PParamList)nodeArrayList1.get(0);
        tseparatorNode3 = (TSeparator)nodeArrayList2.get(0);
        pelementlistNode4 = (PElementList)nodeArrayList3.get(0);

        pelementlistNode1 = new AExpandElementList(pparamlistNode2, tseparatorNode3, pelementlistNode4);
        }
	nodeList.add(pelementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AEmptyElementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PElementList pelementlistNode1;
        {
            // Block

        pelementlistNode1 = new AEmptyElementList();
        }
	nodeList.add(pelementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TId tidNode2;
        PCall pcallNode3;
        PValList pvallistNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pcallNode3 = (PCall)nodeArrayList2.get(0);
        pvallistNode4 = (PValList)nodeArrayList3.get(0);

        pvalNode1 = new AVal(tidNode2, pcallNode3, pvallistNode4);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AExpandValList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValList pvallistNode1;
        {
            // Block
        TDot tdotNode2;
        PVal pvalNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        pvalNode3 = (PVal)nodeArrayList2.get(0);

        pvallistNode1 = new AExpandValList(tdotNode2, pvalNode3);
        }
	nodeList.add(pvallistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AEmptyValList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PValList pvallistNode1;
        {
            // Block

        pvallistNode1 = new AEmptyValList();
        }
	nodeList.add(pvallistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ACallCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        {
            // Block
        TId tidNode2;
        PParamList pparamlistNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pparamlistNode3 = (PParamList)nodeArrayList2.get(0);

        pcallNode1 = new ACallCall(tidNode2, pparamlistNode3);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AEmptyCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PCall pcallNode1;
        {
            // Block

        pcallNode1 = new AEmptyCall();
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAparamlist1ParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamList pparamlistNode1;
        {
            // Block
        TLParen tlparenNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRParen trparenNode5;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        {
            // Block
        }
        trparenNode5 = (TRParen)nodeArrayList2.get(0);

        pparamlistNode1 = new AParamList(tlparenNode2, null, listNode4, trparenNode5);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAparamlist2ParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamList pparamlistNode1;
        {
            // Block
        TLParen tlparenNode2;
        PExpr pexprNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRParen trparenNode5;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        }
        trparenNode5 = (TRParen)nodeArrayList3.get(0);

        pparamlistNode1 = new AParamList(tlparenNode2, pexprNode3, listNode4, trparenNode5);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAparamlist3ParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamList pparamlistNode1;
        {
            // Block
        TLParen tlparenNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRParen trparenNode6;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trparenNode6 = (TRParen)nodeArrayList3.get(0);

        pparamlistNode1 = new AParamList(tlparenNode2, null, listNode5, trparenNode6);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAparamlist4ParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamList pparamlistNode1;
        {
            // Block
        TLParen tlparenNode2;
        PExpr pexprNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRParen trparenNode6;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trparenNode6 = (TRParen)nodeArrayList4.get(0);

        pparamlistNode1 = new AParamList(tlparenNode2, pexprNode3, listNode5, trparenNode6);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        TSeparator tseparatorNode2;
        PExpr pexprNode3;
        tseparatorNode2 = (TSeparator)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pparamNode1 = new AParam(tseparatorNode2, pexprNode3);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMoveDclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMoveDclList pmovedcllistNode1;
        {
            // Block
        PMethodDcl pmethoddclNode2;
        PMoveDclList pmovedcllistNode3;
        pmethoddclNode2 = (PMethodDcl)nodeArrayList1.get(0);
        pmovedcllistNode3 = (PMoveDclList)nodeArrayList2.get(0);

        pmovedcllistNode1 = new AMoveDclList(pmethoddclNode2, pmovedcllistNode3);
        }
	nodeList.add(pmovedcllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMethodDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDcl pmethoddclNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLParen tlparenNode4;
        PParamDclList pparamdcllistNode5;
        TRParen trparenNode6;
        TTypeof ttypeofNode7;
        PType ptypeNode8;
        TLBrack tlbrackNode9;
        PStmtList pstmtlistNode10;
        PReturnStmt preturnstmtNode11;
        TRBrack trbrackNode12;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparenNode4 = (TLParen)nodeArrayList3.get(0);
        pparamdcllistNode5 = (PParamDclList)nodeArrayList4.get(0);
        trparenNode6 = (TRParen)nodeArrayList5.get(0);
        ttypeofNode7 = (TTypeof)nodeArrayList6.get(0);
        ptypeNode8 = (PType)nodeArrayList7.get(0);
        tlbrackNode9 = (TLBrack)nodeArrayList8.get(0);
        pstmtlistNode10 = (PStmtList)nodeArrayList9.get(0);
        preturnstmtNode11 = (PReturnStmt)nodeArrayList10.get(0);
        trbrackNode12 = (TRBrack)nodeArrayList11.get(0);

        pmethoddclNode1 = new AMethodDcl(tfunNode2, tidNode3, tlparenNode4, pparamdcllistNode5, trparenNode6, ttypeofNode7, ptypeNode8, tlbrackNode9, pstmtlistNode10, preturnstmtNode11, trbrackNode12);
        }
	nodeList.add(pmethoddclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExpandParamDclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamDclList pparamdcllistNode1;
        {
            // Block
        PParamDcl pparamdclNode2;
        TSeparator tseparatorNode3;
        PParamDclList pparamdcllistNode4;
        pparamdclNode2 = (PParamDcl)nodeArrayList1.get(0);
        tseparatorNode3 = (TSeparator)nodeArrayList2.get(0);
        pparamdcllistNode4 = (PParamDclList)nodeArrayList3.get(0);

        pparamdcllistNode1 = new AExpandParamDclList(pparamdclNode2, tseparatorNode3, pparamdcllistNode4);
        }
	nodeList.add(pparamdcllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ASingleParamDclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamDclList pparamdcllistNode1;
        {
            // Block
        PParamDcl pparamdclNode2;
        pparamdclNode2 = (PParamDcl)nodeArrayList1.get(0);

        pparamdcllistNode1 = new ASingleParamDclList(pparamdclNode2);
        }
	nodeList.add(pparamdcllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ASingleParamDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamDcl pparamdclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparamdclNode1 = new ASingleParamDcl(ptypeNode2, tidNode3);
        }
	nodeList.add(pparamdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AEmptyParamDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParamDcl pparamdclNode1;
        {
            // Block

        pparamdclNode1 = new AEmptyParamDcl();
        }
	nodeList.add(pparamdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ATypeType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TType ttypeNode2;
        ttypeNode2 = (TType)nodeArrayList1.get(0);

        ptypeNode1 = new ATypeType(ttypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ACollectionType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PCollection pcollectionNode2;
        pcollectionNode2 = (PCollection)nodeArrayList1.get(0);

        ptypeNode1 = new ACollectionType(pcollectionNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AArrayCollection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCollection pcollectionNode1;
        {
            // Block
        PArray parrayNode2;
        parrayNode2 = (PArray)nodeArrayList1.get(0);

        pcollectionNode1 = new AArrayCollection(parrayNode2);
        }
	nodeList.add(pcollectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AListCollection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCollection pcollectionNode1;
        {
            // Block
        PList plistNode2;
        plistNode2 = (PList)nodeArrayList1.get(0);

        pcollectionNode1 = new AListCollection(plistNode2);
        }
	nodeList.add(pcollectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        TType ttypeNode2;
        TLBox tlboxNode3;
        TRBox trboxNode4;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tlboxNode3 = (TLBox)nodeArrayList2.get(0);
        trboxNode4 = (TRBox)nodeArrayList3.get(0);

        parrayNode1 = new AArray(ttypeNode2, tlboxNode3, trboxNode4);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PList plistNode1;
        {
            // Block
        TList tlistNode2;
        TTypeof ttypeofNode3;
        TType ttypeNode4;
        tlistNode2 = (TList)nodeArrayList1.get(0);
        ttypeofNode3 = (TTypeof)nodeArrayList2.get(0);
        ttypeNode4 = (TType)nodeArrayList3.get(0);

        plistNode1 = new AList(tlistNode2, ttypeofNode3, ttypeNode4);
        }
	nodeList.add(plistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AExpandStmtList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtList pstmtlistNode1;
        {
            // Block
        PStmt pstmtNode2;
        PStmtList pstmtlistNode3;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        pstmtlistNode3 = (PStmtList)nodeArrayList2.get(0);

        pstmtlistNode1 = new AExpandStmtList(pstmtNode2, pstmtlistNode3);
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AEmptyStmtList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStmtList pstmtlistNode1;
        {
            // Block

        pstmtlistNode1 = new AEmptyStmtList();
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ASingleReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnStmt preturnstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        preturnstmtNode1 = new ASingleReturnStmt(treturnNode2, pexprNode3, tsemiNode4);
        }
	nodeList.add(preturnstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AEmptyReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PReturnStmt preturnstmtNode1;
        {
            // Block

        preturnstmtNode1 = new AEmptyReturnStmt();
        }
	nodeList.add(preturnstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ASelectStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PSelectStmt pselectstmtNode2;
        pselectstmtNode2 = (PSelectStmt)nodeArrayList1.get(0);

        pstmtNode1 = new ASelectStmt(pselectstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ADclStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PDcl pdclNode2;
        pdclNode2 = (PDcl)nodeArrayList1.get(0);

        pstmtNode1 = new ADclStmt(pdclNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ALoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLoopStmt ploopstmtNode2;
        ploopstmtNode2 = (PLoopStmt)nodeArrayList1.get(0);

        pstmtNode1 = new ALoopStmt(ploopstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ACallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PVal pvalNode2;
        TSemi tsemiNode3;
        pvalNode2 = (PVal)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pstmtNode1 = new ACallStmt(pvalNode2, tsemiNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AIfSelectStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSelectStmt pselectstmtNode1;
        {
            // Block
        PIfStmt pifstmtNode2;
        pifstmtNode2 = (PIfStmt)nodeArrayList1.get(0);

        pselectstmtNode1 = new AIfSelectStmt(pifstmtNode2);
        }
	nodeList.add(pselectstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ASwitchSelectStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSelectStmt pselectstmtNode1;
        {
            // Block
        PSwitchStmt pswitchstmtNode2;
        pswitchstmtNode2 = (PSwitchStmt)nodeArrayList1.get(0);

        pselectstmtNode1 = new ASwitchSelectStmt(pswitchstmtNode2);
        }
	nodeList.add(pselectstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ABlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrack tlbrackNode2;
        PStmtList pstmtlistNode3;
        TRBrack trbrackNode4;
        tlbrackNode2 = (TLBrack)nodeArrayList1.get(0);
        pstmtlistNode3 = (PStmtList)nodeArrayList2.get(0);
        trbrackNode4 = (TRBrack)nodeArrayList3.get(0);

        pblockNode1 = new ABlock(tlbrackNode2, pstmtlistNode3, trbrackNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        PBlock pblockNode4;
        PElseStmt pelsestmtNode5;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);
        pelsestmtNode5 = (PElseStmt)nodeArrayList4.get(0);

        pifstmtNode1 = new AIfStmt(tifNode2, pexprNode3, pblockNode4, pelsestmtNode5);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AElseifElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStmt pelsestmtNode1;
        {
            // Block
        TElse telseNode2;
        PIfStmt pifstmtNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pifstmtNode3 = (PIfStmt)nodeArrayList2.get(0);

        pelsestmtNode1 = new AElseifElseStmt(telseNode2, pifstmtNode3);
        }
	nodeList.add(pelsestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AElseElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStmt pelsestmtNode1;
        {
            // Block
        TElse telseNode2;
        PBlock pblockNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        pelsestmtNode1 = new AElseElseStmt(telseNode2, pblockNode3);
        }
	nodeList.add(pelsestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PElseStmt pelsestmtNode1;
        {
            // Block

        pelsestmtNode1 = new AElseStmt();
        }
	nodeList.add(pelsestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ASwitchStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSwitchStmt pswitchstmtNode1;
        {
            // Block
        TSwitch tswitchNode2;
        TLParen tlparenNode3;
        PVal pvalNode4;
        TLBrack tlbrackNode5;
        PCaseList pcaselistNode6;
        TRBrack trbrackNode7;
        tswitchNode2 = (TSwitch)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        pvalNode4 = (PVal)nodeArrayList3.get(0);
        tlbrackNode5 = (TLBrack)nodeArrayList4.get(0);
        pcaselistNode6 = (PCaseList)nodeArrayList5.get(0);
        trbrackNode7 = (TRBrack)nodeArrayList6.get(0);

        pswitchstmtNode1 = new ASwitchStmt(tswitchNode2, tlparenNode3, pvalNode4, tlbrackNode5, pcaselistNode6, trbrackNode7);
        }
	nodeList.add(pswitchstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AListCaseList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCaseList pcaselistNode1;
        {
            // Block
        PCaseStmt pcasestmtNode2;
        PCaseList pcaselistNode3;
        pcasestmtNode2 = (PCaseStmt)nodeArrayList1.get(0);
        pcaselistNode3 = (PCaseList)nodeArrayList2.get(0);

        pcaselistNode1 = new AListCaseList(pcasestmtNode2, pcaselistNode3);
        }
	nodeList.add(pcaselistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ADefaultCaseList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCaseList pcaselistNode1;
        {
            // Block
        PDefaultStmt pdefaultstmtNode2;
        pdefaultstmtNode2 = (PDefaultStmt)nodeArrayList1.get(0);

        pcaselistNode1 = new ADefaultCaseList(pdefaultstmtNode2);
        }
	nodeList.add(pcaselistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AEmptyCaseList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PCaseList pcaselistNode1;
        {
            // Block

        pcaselistNode1 = new AEmptyCaseList();
        }
	nodeList.add(pcaselistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ACaseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCaseStmt pcasestmtNode1;
        {
            // Block
        TCase tcaseNode2;
        TColon tcolonNode3;
        PBlock pblockNode4;
        tcaseNode2 = (TCase)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);

        pcasestmtNode1 = new ACaseStmt(tcaseNode2, tcolonNode3, pblockNode4);
        }
	nodeList.add(pcasestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ADefaultStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefaultStmt pdefaultstmtNode1;
        {
            // Block
        TDefault tdefaultNode2;
        TColon tcolonNode3;
        PBlock pblockNode4;
        tdefaultNode2 = (TDefault)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);

        pdefaultstmtNode1 = new ADefaultStmt(tdefaultNode2, tcolonNode3, pblockNode4);
        }
	nodeList.add(pdefaultstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AWhileLoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoopStmt ploopstmtNode1;
        {
            // Block
        PWhileLoop pwhileloopNode2;
        pwhileloopNode2 = (PWhileLoop)nodeArrayList1.get(0);

        ploopstmtNode1 = new AWhileLoopStmt(pwhileloopNode2);
        }
	nodeList.add(ploopstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AForLoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoopStmt ploopstmtNode1;
        {
            // Block
        PForLoop pforloopNode2;
        pforloopNode2 = (PForLoop)nodeArrayList1.get(0);

        ploopstmtNode1 = new AForLoopStmt(pforloopNode2);
        }
	nodeList.add(ploopstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AWhileLoop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhileLoop pwhileloopNode1;
        {
            // Block
        TWhile twhileNode2;
        PExpr pexprNode3;
        PBlock pblockNode4;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);

        pwhileloopNode1 = new AWhileLoop(twhileNode2, pexprNode3, pblockNode4);
        }
	nodeList.add(pwhileloopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AForLoop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForLoop pforloopNode1;
        {
            // Block
        TFor tforNode2;
        PLoopExpr ploopexprNode3;
        PBlock pblockNode4;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        ploopexprNode3 = (PLoopExpr)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);

        pforloopNode1 = new AForLoop(tforNode2, ploopexprNode3, pblockNode4);
        }
	nodeList.add(pforloopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AForeachLoopExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoopExpr ploopexprNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TIn tinNode4;
        TId tidNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinNode4 = (TIn)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);

        ploopexprNode1 = new AForeachLoopExpr(ptypeNode2, tidNode3, tinNode4, tidNode5);
        }
	nodeList.add(ploopexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AForLoopExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoopExpr ploopexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TSemi tsemiNode3;
        PExpr pexprNode4;
        TSemi tsemiNode5;
        PExpr pexprNode6;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);
        pexprNode6 = (PExpr)nodeArrayList5.get(0);

        ploopexprNode1 = new AForLoopExpr(pexprNode2, tsemiNode3, pexprNode4, tsemiNode5, pexprNode6);
        }
	nodeList.add(ploopexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATurn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTurn pturnNode1;
        {
            // Block
        TTurn tturnNode2;
        PBlock pblockNode3;
        tturnNode2 = (TTurn)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        pturnNode1 = new ATurn(tturnNode2, pblockNode3);
        }
	nodeList.add(pturnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AEndCon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEndCon pendconNode1;
        {
            // Block
        TEndCon tendconNode2;
        PBlock pblockNode3;
        tendconNode2 = (TEndCon)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        pendconNode1 = new AEndCon(tendconNode2, pblockNode3);
        }
	nodeList.add(pendconNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ATerminal$Param */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParam pparamNode1;
        pparamNode1 = (PParam)nodeArrayList1.get(0);
	if(pparamNode1 != null)
	{
	  listNode2.add(pparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANonTerminal$Param */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParam pparamNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparamNode2 = (PParam)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparamNode2 != null)
	{
	  listNode3.add(pparamNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {15, SHIFT, 1}, },
			{{-1, ERROR, 1}, {13, SHIFT, 4}, },
			{{-1, ERROR, 2}, {43, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {20, SHIFT, 5}, },
			{{-1, REDUCE, 55}, {0, SHIFT, 7}, {25, SHIFT, 8}, {27, SHIFT, 9}, {31, SHIFT, 10}, {32, SHIFT, 11}, {37, SHIFT, 12}, {40, SHIFT, 13}, },
			{{-1, ERROR, 5}, {42, SHIFT, 28}, },
			{{-1, ERROR, 6}, {34, SHIFT, 31}, },
			{{-1, REDUCE, 36}, {0, SHIFT, 33}, },
			{{-1, ERROR, 8}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, ERROR, 9}, {11, SHIFT, 51}, },
			{{-1, ERROR, 10}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, ERROR, 11}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, {37, SHIFT, 12}, {40, SHIFT, 13}, },
			{{-1, REDUCE, 48}, {21, SHIFT, 56}, },
			{{-1, ERROR, 13}, {41, SHIFT, 57}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 15}, {24, SHIFT, 58}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 59}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 20}, {16, SHIFT, 61}, },
			{{-1, REDUCE, 55}, {0, SHIFT, 7}, {25, SHIFT, 8}, {27, SHIFT, 9}, {31, SHIFT, 10}, {32, SHIFT, 11}, {37, SHIFT, 12}, {40, SHIFT, 13}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 28}, {0, SHIFT, 64}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 30}, {42, SHIFT, 28}, },
			{{-1, ERROR, 31}, {13, SHIFT, 66}, },
			{{-1, ERROR, 32}, {35, SHIFT, 68}, },
			{{-1, ERROR, 33}, {11, SHIFT, 70}, },
			{{-1, REDUCE, 34}, {19, SHIFT, 72}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 39}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, REDUCE, 31}, {11, SHIFT, 70}, },
			{{-1, ERROR, 41}, {7, SHIFT, 77}, {13, SHIFT, 66}, },
			{{-1, REDUCE, 11}, {10, SHIFT, 79}, },
			{{-1, REDUCE, 13}, {8, SHIFT, 80}, },
			{{-1, REDUCE, 15}, {2, SHIFT, 81}, },
			{{-1, REDUCE, 17}, {3, SHIFT, 82}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 51}, {0, SHIFT, 7}, },
			{{-1, ERROR, 52}, {7, SHIFT, 77}, {13, SHIFT, 66}, },
			{{-1, ERROR, 53}, {7, SHIFT, 77}, {24, SHIFT, 85}, },
			{{-1, ERROR, 54}, {0, SHIFT, 86}, },
			{{-1, ERROR, 55}, {13, SHIFT, 66}, },
			{{-1, ERROR, 56}, {22, SHIFT, 88}, },
			{{-1, ERROR, 57}, {37, SHIFT, 89}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 9}, {9, SHIFT, 90}, },
			{{-1, ERROR, 60}, {24, SHIFT, 92}, },
			{{-1, ERROR, 61}, {13, SHIFT, 66}, },
			{{-1, ERROR, 62}, {17, SHIFT, 94}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 64}, {11, SHIFT, 96}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 55}, {0, SHIFT, 7}, {25, SHIFT, 8}, {27, SHIFT, 9}, {31, SHIFT, 10}, {32, SHIFT, 11}, {37, SHIFT, 12}, {40, SHIFT, 13}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 68}, {13, SHIFT, 66}, },
			{{-1, ERROR, 69}, {42, SHIFT, 28}, },
			{{-1, ERROR, 70}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {12, SHIFT, 100}, {13, SHIFT, 40}, {18, SHIFT, 101}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 72}, {0, SHIFT, 7}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 74}, {7, SHIFT, 77}, {12, SHIFT, 106}, },
			{{-1, ERROR, 75}, {14, SHIFT, 107}, },
			{{-1, ERROR, 76}, {18, SHIFT, 108}, },
			{{-1, ERROR, 77}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, REDUCE, 68}, {26, SHIFT, 110}, },
			{{-1, ERROR, 79}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, ERROR, 80}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, ERROR, 81}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, ERROR, 82}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, ERROR, 83}, {13, SHIFT, 116}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 85}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, ERROR, 86}, {36, SHIFT, 118}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 90}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, ERROR, 91}, {18, SHIFT, 120}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 94}, {13, SHIFT, 66}, },
			{{-1, ERROR, 95}, {14, SHIFT, 122}, },
			{{-1, REDUCE, 47}, {37, SHIFT, 12}, {40, SHIFT, 13}, },
			{{-1, ERROR, 97}, {14, SHIFT, 126}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 101}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, ERROR, 102}, {7, SHIFT, 77}, {12, SHIFT, 128}, {18, SHIFT, 101}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 104}, {12, SHIFT, 130}, {18, SHIFT, 101}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 31}, {11, SHIFT, 70}, },
			{{-1, REDUCE, 10}, {10, SHIFT, 79}, },
			{{-1, ERROR, 110}, {13, SHIFT, 66}, {25, SHIFT, 8}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 12}, {8, SHIFT, 80}, },
			{{-1, REDUCE, 14}, {2, SHIFT, 81}, },
			{{-1, REDUCE, 16}, {3, SHIFT, 82}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 72}, {28, SHIFT, 135}, {29, SHIFT, 136}, },
			{{-1, ERROR, 117}, {7, SHIFT, 77}, {24, SHIFT, 140}, },
			{{-1, ERROR, 118}, {0, SHIFT, 141}, },
			{{-1, REDUCE, 8}, {7, SHIFT, 77}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 123}, {12, SHIFT, 142}, },
			{{-1, REDUCE, 45}, {18, SHIFT, 143}, },
			{{-1, ERROR, 125}, {0, SHIFT, 144}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 41}, {7, SHIFT, 77}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 129}, {12, SHIFT, 145}, {18, SHIFT, 101}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 135}, {30, SHIFT, 146}, },
			{{-1, ERROR, 136}, {30, SHIFT, 147}, },
			{{-1, ERROR, 137}, {14, SHIFT, 148}, },
			{{-1, REDUCE, 72}, {28, SHIFT, 135}, {29, SHIFT, 136}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 140}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 142}, {41, SHIFT, 151}, },
			{{-1, REDUCE, 47}, {37, SHIFT, 12}, {40, SHIFT, 13}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 146}, {13, SHIFT, 66}, },
			{{-1, ERROR, 147}, {13, SHIFT, 66}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 80}, {7, SHIFT, 77}, },
			{{-1, ERROR, 151}, {37, SHIFT, 12}, {40, SHIFT, 13}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 155}, {13, SHIFT, 156}, },
			{{-1, REDUCE, 55}, {0, SHIFT, 7}, {25, SHIFT, 8}, {27, SHIFT, 9}, {31, SHIFT, 10}, {32, SHIFT, 11}, {37, SHIFT, 12}, {40, SHIFT, 13}, },
			{{-1, REDUCE, 57}, {23, SHIFT, 158}, },
			{{-1, ERROR, 158}, {0, SHIFT, 7}, {1, SHIFT, 35}, {4, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 38}, {11, SHIFT, 39}, {13, SHIFT, 40}, },
			{{-1, ERROR, 159}, {14, SHIFT, 161}, },
			{{-1, ERROR, 160}, {7, SHIFT, 77}, {24, SHIFT, 162}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 56}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 62}, },
			{{-1, 95}, },
			{{-1, 6}, },
			{{-1, 60}, },
			{{-1, 14}, },
			{{-1, 91}, },
			{{-1, 41}, {10, 52}, {11, 53}, {39, 74}, {70, 102}, {85, 117}, {90, 119}, {101, 127}, {140, 150}, {158, 160}, },
			{{-1, 42}, {77, 109}, },
			{{-1, 43}, {79, 112}, },
			{{-1, 44}, {80, 113}, },
			{{-1, 45}, {81, 114}, },
			{{-1, 46}, {82, 115}, },
			{{-1, 47}, },
			{{-1, 48}, },
			{{-1, 49}, },
			{{-1, 75}, {108, 132}, },
			{{-1, 50}, {4, 15}, {21, 15}, {51, 83}, {66, 15}, {72, 105}, {156, 15}, },
			{{-1, 73}, },
			{{-1, 34}, },
			{{-1, 76}, {33, 71}, },
			{{-1, 103}, {104, 131}, {129, 131}, },
			{{-1, 29}, {30, 65}, {69, 99}, },
			{{-1, 30}, },
			{{-1, 123}, {143, 152}, },
			{{-1, 124}, },
			{{-1, 16}, {11, 54}, {96, 125}, {143, 125}, {151, 155}, },
			{{-1, 17}, },
			{{-1, 18}, },
			{{-1, 19}, },
			{{-1, 20}, {21, 63}, {66, 97}, {156, 157}, },
			{{-1, 159}, },
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, 67}, {41, 78}, {52, 84}, {55, 87}, {61, 93}, {68, 98}, {94, 121}, {110, 133}, {146, 153}, {147, 154}, },
			{{-1, 23}, {110, 134}, },
			{{-1, 111}, },
			{{-1, 24}, },
			{{-1, 137}, {138, 149}, },
			{{-1, 138}, },
			{{-1, 139}, },
			{{-1, 25}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 55}, },
			{{-1, 32}, },
			{{-1, 69}, },
			{{-1, 104}, {102, 129}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'Setup'",
			"expecting: '{'",
			"expecting: EOF",
			"expecting: 'Moves'",
			"expecting: id, 'Public', 'if', 'switch', 'while', 'for', type, 'List'",
			"expecting: 'Function'",
			"expecting: 'Turn'",
			"expecting: id, add op, mult op, bool op, relation op, equal op, ')', '{', ',', '.', ';'",
			"expecting: id, bool literal, int literal, float literal, string, '(', '{'",
			"expecting: '('",
			"expecting: id, bool literal, int literal, float literal, string, '(', '{', type, 'List'",
			"expecting: id, '{', '[', ';'",
			"expecting: 'typeof'",
			"expecting: id, '}', 'Public', 'return', 'if', 'switch', 'while', 'for', type, 'List'",
			"expecting: ';'",
			"expecting: id, ';'",
			"expecting: id, '{', ';'",
			"expecting: 'Public'",
			"expecting: id",
			"expecting: 'EndCondition'",
			"expecting: add op, mult op, bool op, relation op, equal op, ')', '{', ',', '.', ';'",
			"expecting: add op, mult op, bool op, relation op, equal op, ')', '{', ',', ';'",
			"expecting: '(', '}'",
			"expecting: bool op, '{'",
			"expecting: bool op, equal op, ')', '{', ',', ';'",
			"expecting: bool op, relation op, equal op, ')', '{', ',', ';'",
			"expecting: add op, bool op, relation op, equal op, ')', '{', ',', ';'",
			"expecting: bool op, ';'",
			"expecting: ']'",
			"expecting: type",
			"expecting: assign, ','",
			"expecting: 'Private'",
			"expecting: '}', 'Public', 'return'",
			"expecting: 'Turn', EOF",
			"expecting: id, '}', 'if', 'switch', 'while', 'for', type, 'List'",
			"expecting: id, bool literal, int literal, float literal, string, '(', ')', '{', ','",
			"expecting: bool op, ')'",
			"expecting: '}'",
			"expecting: ','",
			"expecting: id, '}', 'Public', 'return', 'if', 'else', 'switch', 'while', 'for', type, 'List'",
			"expecting: 'in'",
			"expecting: ')', ',', type, 'List'",
			"expecting: bool op, ')', ','",
			"expecting: ')', ','",
			"expecting: '{', 'if'",
			"expecting: '}', 'case', 'default'",
			"expecting: bool op, ','",
			"expecting: ')'",
			"expecting: id, '}', 'Public', 'Private', 'return', 'if', 'else', 'switch', 'case', 'default', 'while', 'for', 'EndCondition', type, 'List', 'Function'",
			"expecting: ':'",
			"expecting: type, 'List'",
			"expecting: id, '}', 'return', 'if', 'switch', 'while', 'for', type, 'List'",
			"expecting: '}', 'return'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 10, 11, 12, 13, 14, 15, 16, 16, 16, 17, 13, 13, 13, 13, 13, 13, 13, 18, 6, 5, 1, 19, 9, 20, 21, 21, 21, 21, 8, 22, 23, 24, 25, 26, 21, 21, 21, 21, 21, 21, 18, 23, 27, 18, 1, 28, 29, 13, 30, 14, 1, 31, 32, 9, 33, 34, 19, 1, 5, 35, 20, 18, 21, 36, 37, 38, 8, 39, 8, 8, 8, 8, 1, 13, 8, 40, 13, 16, 16, 8, 38, 13, 31, 1, 37, 41, 37, 5, 2, 20, 8, 42, 43, 43, 21, 21, 21, 22, 24, 44, 13, 25, 26, 21, 21, 45, 27, 18, 46, 14, 37, 3, 47, 43, 18, 48, 42, 20, 43, 20, 43, 37, 13, 13, 49, 49, 37, 45, 37, 8, 1, 12, 41, 43, 20, 1, 1, 13, 37, 23, 50, 47, 45, 37, 1, 51, 52, 8, 37, 27, 5, 37, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
