/* This file was generated by SableCC (http://www.sablecc.org/). */

package P4.Sable.parser;

import P4.CodeGenarator.SemanticException;
import P4.Sable.lexer.*;
import P4.Sable.node.*;
import P4.Sable.analysis.*;
import P4.contextualAnalysis.TypeException;

import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token) throws TypeException, SemanticException {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException, TypeException, SemanticException {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprog1Prog */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprog2Prog */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAprog3Prog */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAprog4Prog */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AInclude */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce ASetup */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce ACard */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AAclassbody1ClassBody */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce AAclassbody2ClassBody */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce AAclassbody3ClassBody */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AAclassbody4ClassBody */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AAclassbody5ClassBody */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AAclassbody6ClassBody */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AAclassbody7ClassBody */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list);
            }
            break;
            case 14: /* reduce AAclassbody8ClassBody */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list);
            }
            break;
            case 15: /* reduce AAclassbody9ClassBody */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list);
            }
            break;
            case 16: /* reduce AAclassbody10ClassBody */
            {
                ArrayList<Object> list = new16();
                push(goTo(4), list);
            }
            break;
            case 17: /* reduce AAclassbody11ClassBody */
            {
                ArrayList<Object> list = new17();
                push(goTo(4), list);
            }
            break;
            case 18: /* reduce AAclassbody12ClassBody */
            {
                ArrayList<Object> list = new18();
                push(goTo(4), list);
            }
            break;
            case 19: /* reduce AAclassbody13ClassBody */
            {
                ArrayList<Object> list = new19();
                push(goTo(4), list);
            }
            break;
            case 20: /* reduce AAclassbody14ClassBody */
            {
                ArrayList<Object> list = new20();
                push(goTo(4), list);
            }
            break;
            case 21: /* reduce AAclassbody15ClassBody */
            {
                ArrayList<Object> list = new21();
                push(goTo(4), list);
            }
            break;
            case 22: /* reduce AAclassbody16ClassBody */
            {
                ArrayList<Object> list = new22();
                push(goTo(4), list);
            }
            break;
            case 23: /* reduce ASubclass */
            {
                ArrayList<Object> list = new23();
                push(goTo(5), list);
            }
            break;
            case 24: /* reduce AAconstruct1Construct */
            {
                ArrayList<Object> list = new24();
                push(goTo(6), list);
            }
            break;
            case 25: /* reduce AAconstruct2Construct */
            {
                ArrayList<Object> list = new25();
                push(goTo(6), list);
            }
            break;
            case 26: /* reduce AGame */
            {
                ArrayList<Object> list = new26();
                push(goTo(7), list);
            }
            break;
            case 27: /* reduce APlayer */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce AAmoves1Moves */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list);
            }
            break;
            case 29: /* reduce AAmoves2Moves */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list);
            }
            break;
            case 30: /* reduce AAdcl1Dcl */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list);
            }
            break;
            case 31: /* reduce AAdcl2Dcl */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list);
            }
            break;
            case 32: /* reduce AAsingledcl1SingleDcl */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list);
            }
            break;
            case 33: /* reduce AAsingledcl2SingleDcl */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list);
            }
            break;
            case 34: /* reduce ADclList */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce AInit */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce AExpandExpr */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list);
            }
            break;
            case 37: /* reduce ASingleExpr */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce AExpandEquality */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list);
            }
            break;
            case 39: /* reduce ASingleEquality */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list);
            }
            break;
            case 40: /* reduce AExpandRelation */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list);
            }
            break;
            case 41: /* reduce ASingleRelation */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list);
            }
            break;
            case 42: /* reduce AExpandAddExpr */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list);
            }
            break;
            case 43: /* reduce ASingleAddExpr */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list);
            }
            break;
            case 44: /* reduce AExpandTerm */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list);
            }
            break;
            case 45: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list);
            }
            break;
            case 46: /* reduce AExpandFactor */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list);
            }
            break;
            case 47: /* reduce ALiteralFactor */
            {
                ArrayList<Object> list = new47();
                push(goTo(19), list);
            }
            break;
            case 48: /* reduce AValFactor */
            {
                ArrayList<Object> list = new48();
                push(goTo(19), list);
            }
            break;
            case 49: /* reduce AAinitfactor1Factor */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list);
            }
            break;
            case 50: /* reduce AAinitfactor2Factor */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list);
            }
            break;
            case 51: /* reduce AParens */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list);
            }
            break;
            case 52: /* reduce AIntLiteral */
            {
                ArrayList<Object> list = new52();
                push(goTo(21), list);
            }
            break;
            case 53: /* reduce AFloatLiteral */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list);
            }
            break;
            case 54: /* reduce AStringLiteral */
            {
                ArrayList<Object> list = new54();
                push(goTo(21), list);
            }
            break;
            case 55: /* reduce ABoolLiteral */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list);
            }
            break;
            case 56: /* reduce AElement */
            {
                ArrayList<Object> list = new56();
                push(goTo(22), list);
            }
            break;
            case 57: /* reduce AAval1Val */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list);
            }
            break;
            case 58: /* reduce AAval2Val */
            {
                ArrayList<Object> list = new58();
                push(goTo(23), list);
            }
            break;
            case 59: /* reduce AValList */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list);
            }
            break;
            case 60: /* reduce AFieldCallField */
            {
                ArrayList<Object> list = new60();
                push(goTo(25), list);
            }
            break;
            case 61: /* reduce ACallCallField */
            {
                ArrayList<Object> list = new61();
                push(goTo(25), list);
            }
            break;
            case 62: /* reduce AAcall1Call */
            {
                ArrayList<Object> list = new62();
                push(goTo(26), list);
            }
            break;
            case 63: /* reduce AAcall2Call */
            {
                ArrayList<Object> list = new63();
                push(goTo(26), list);
            }
            break;
            case 64: /* reduce AAcall3Call */
            {
                ArrayList<Object> list = new64();
                push(goTo(26), list);
            }
            break;
            case 65: /* reduce AAcall4Call */
            {
                ArrayList<Object> list = new65();
                push(goTo(26), list);
            }
            break;
            case 66: /* reduce AParam */
            {
                ArrayList<Object> list = new66();
                push(goTo(27), list);
            }
            break;
            case 67: /* reduce AAmethoddcl1MethodDcl */
            {
                ArrayList<Object> list = new67();
                push(goTo(28), list);
            }
            break;
            case 68: /* reduce AAmethoddcl2MethodDcl */
            {
                ArrayList<Object> list = new68();
                push(goTo(28), list);
            }
            break;
            case 69: /* reduce AAparamdcllist1ParamDclList */
            {
                ArrayList<Object> list = new69();
                push(goTo(29), list);
            }
            break;
            case 70: /* reduce AAparamdcllist2ParamDclList */
            {
                ArrayList<Object> list = new70();
                push(goTo(29), list);
            }
            break;
            case 71: /* reduce AExpandParam */
            {
                ArrayList<Object> list = new71();
                push(goTo(30), list);
            }
            break;
            case 72: /* reduce AParamDcl */
            {
                ArrayList<Object> list = new72();
                push(goTo(31), list);
            }
            break;
            case 73: /* reduce AListType */
            {
                ArrayList<Object> list = new73();
                push(goTo(32), list);
            }
            break;
            case 74: /* reduce AVarType */
            {
                ArrayList<Object> list = new74();
                push(goTo(32), list);
            }
            break;
            case 75: /* reduce AList */
            {
                ArrayList<Object> list = new75();
                push(goTo(33), list);
            }
            break;
            case 76: /* reduce ASelectStmt */
            {
                ArrayList<Object> list = new76();
                push(goTo(34), list);
            }
            break;
            case 77: /* reduce ADclStmt */
            {
                ArrayList<Object> list = new77();
                push(goTo(34), list);
            }
            break;
            case 78: /* reduce ALoopStmt */
            {
                ArrayList<Object> list = new78();
                push(goTo(34), list);
            }
            break;
            case 79: /* reduce AAssignStmt */
            {
                ArrayList<Object> list = new79();
                push(goTo(34), list);
            }
            break;
            case 80: /* reduce ACallStmt */
            {
                ArrayList<Object> list = new80();
                push(goTo(34), list);
            }
            break;
            case 81: /* reduce AReturnStmt */
            {
                ArrayList<Object> list = new81();
                push(goTo(34), list);
            }
            break;
            case 82: /* reduce AIfSelectStmt */
            {
                ArrayList<Object> list = new82();
                push(goTo(35), list);
            }
            break;
            case 83: /* reduce ASwitchSelectStmt */
            {
                ArrayList<Object> list = new83();
                push(goTo(35), list);
            }
            break;
            case 84: /* reduce AAblock1Block */
            {
                ArrayList<Object> list = new84();
                push(goTo(36), list);
            }
            break;
            case 85: /* reduce AAblock2Block */
            {
                ArrayList<Object> list = new85();
                push(goTo(36), list);
            }
            break;
            case 86: /* reduce AAifstmt1IfStmt */
            {
                ArrayList<Object> list = new86();
                push(goTo(37), list);
            }
            break;
            case 87: /* reduce AAifstmt2IfStmt */
            {
                ArrayList<Object> list = new87();
                push(goTo(37), list);
            }
            break;
            case 88: /* reduce AAifstmt3IfStmt */
            {
                ArrayList<Object> list = new88();
                push(goTo(37), list);
            }
            break;
            case 89: /* reduce AAifstmt4IfStmt */
            {
                ArrayList<Object> list = new89();
                push(goTo(37), list);
            }
            break;
            case 90: /* reduce AElseIf */
            {
                ArrayList<Object> list = new90();
                push(goTo(38), list);
            }
            break;
            case 91: /* reduce AElseStmt */
            {
                ArrayList<Object> list = new91();
                push(goTo(39), list);
            }
            break;
            case 92: /* reduce ASwitchStmt */
            {
                ArrayList<Object> list = new92();
                push(goTo(40), list);
            }
            break;
            case 93: /* reduce ACaseCase */
            {
                ArrayList<Object> list = new93();
                push(goTo(41), list);
            }
            break;
            case 94: /* reduce ADefaultCase */
            {
                ArrayList<Object> list = new94();
                push(goTo(41), list);
            }
            break;
            case 95: /* reduce AWhileLoopStmt */
            {
                ArrayList<Object> list = new95();
                push(goTo(42), list);
            }
            break;
            case 96: /* reduce AForeachLoopStmt */
            {
                ArrayList<Object> list = new96();
                push(goTo(42), list);
            }
            break;
            case 97: /* reduce AForLoopStmt */
            {
                ArrayList<Object> list = new97();
                push(goTo(42), list);
            }
            break;
            case 98: /* reduce ADeclareInitLoop */
            {
                ArrayList<Object> list = new98();
                push(goTo(43), list);
            }
            break;
            case 99: /* reduce AAssignInitLoop */
            {
                ArrayList<Object> list = new99();
                push(goTo(43), list);
            }
            break;
            case 100: /* reduce AAssignValue */
            {
                ArrayList<Object> list = new100();
                push(goTo(44), list);
            }
            break;
            case 101: /* reduce ATurn */
            {
                ArrayList<Object> list = new101();
                push(goTo(45), list);
            }
            break;
            case 102: /* reduce AEndCon */
            {
                ArrayList<Object> list = new102();
                push(goTo(46), list);
            }
            break;
            case 103: /* reduce ATerminal$Include */
            {
                ArrayList<Object> list = new103();
                push(goTo(47), list);
            }
            break;
            case 104: /* reduce ANonTerminal$Include */
            {
                ArrayList<Object> list = new104();
                push(goTo(47), list);
            }
            break;
            case 105: /* reduce ATerminal$MethodDcl */
            {
                ArrayList<Object> list = new105();
                push(goTo(48), list);
            }
            break;
            case 106: /* reduce ANonTerminal$MethodDcl */
            {
                ArrayList<Object> list = new106();
                push(goTo(48), list);
            }
            break;
            case 107: /* reduce ATerminal$Stmt */
            {
                ArrayList<Object> list = new107();
                push(goTo(49), list);
            }
            break;
            case 108: /* reduce ANonTerminal$Stmt */
            {
                ArrayList<Object> list = new108();
                push(goTo(49), list);
            }
            break;
            case 109: /* reduce ATerminal$Subclass */
            {
                ArrayList<Object> list = new109();
                push(goTo(50), list);
            }
            break;
            case 110: /* reduce ANonTerminal$Subclass */
            {
                ArrayList<Object> list = new110();
                push(goTo(50), list);
            }
            break;
            case 111: /* reduce ATerminal$DclList */
            {
                ArrayList<Object> list = new111();
                push(goTo(51), list);
            }
            break;
            case 112: /* reduce ANonTerminal$DclList */
            {
                ArrayList<Object> list = new112();
                push(goTo(51), list);
            }
            break;
            case 113: /* reduce ATerminal$Element */
            {
                ArrayList<Object> list = new113();
                push(goTo(52), list);
            }
            break;
            case 114: /* reduce ANonTerminal$Element */
            {
                ArrayList<Object> list = new114();
                push(goTo(52), list);
            }
            break;
            case 115: /* reduce ATerminal$ValList */
            {
                ArrayList<Object> list = new115();
                push(goTo(53), list);
            }
            break;
            case 116: /* reduce ANonTerminal$ValList */
            {
                ArrayList<Object> list = new116();
                push(goTo(53), list);
            }
            break;
            case 117: /* reduce ATerminal$Param */
            {
                ArrayList<Object> list = new117();
                push(goTo(54), list);
            }
            break;
            case 118: /* reduce ANonTerminal$Param */
            {
                ArrayList<Object> list = new118();
                push(goTo(54), list);
            }
            break;
            case 119: /* reduce ATerminal$ExpandParam */
            {
                ArrayList<Object> list = new119();
                push(goTo(55), list);
            }
            break;
            case 120: /* reduce ANonTerminal$ExpandParam */
            {
                ArrayList<Object> list = new120();
                push(goTo(55), list);
            }
            break;
            case 121: /* reduce ATerminal$ElseIf */
            {
                ArrayList<Object> list = new121();
                push(goTo(56), list);
            }
            break;
            case 122: /* reduce ANonTerminal$ElseIf */
            {
                ArrayList<Object> list = new122();
                push(goTo(56), list);
            }
            break;
            case 123: /* reduce ATerminal$Case */
            {
                ArrayList<Object> list = new123();
                push(goTo(57), list);
            }
            break;
            case 124: /* reduce ANonTerminal$Case */
            {
                ArrayList<Object> list = new124();
                push(goTo(57), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprog1Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PSetup psetupNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        {
            // Block
        }
        psetupNode3 = (PSetup)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList4.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }

        pprogNode1 = new AProg(listNode2, psetupNode3, listNode5, listNode7, listNode9, listNode10);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprog2Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PSetup psetupNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        psetupNode4 = (PSetup)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList5.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        }

        pprogNode1 = new AProg(listNode3, psetupNode4, listNode6, listNode8, listNode10, listNode11);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprog3Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PSetup psetupNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        {
            // Block
        }
        psetupNode3 = (PSetup)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList4.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList5.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pprogNode1 = new AProg(listNode2, psetupNode3, listNode5, listNode7, listNode9, listNode11);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprog4Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PSetup psetupNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        psetupNode4 = (PSetup)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList5.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        listNode11 = (LinkedList)nodeArrayList6.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }

        pprogNode1 = new AProg(listNode3, psetupNode4, listNode6, listNode8, listNode10, listNode12);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AInclude */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList2.get(0);
	nodeList.add(tidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ASetup */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSetup psetupNode1;
        {
            // Block
        PClassBody pclassbodyNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PClassBody pclassbodyNode5;
        pclassbodyNode2 = (PClassBody)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pclassbodyNode5 = (PClassBody)nodeArrayList4.get(0);

        psetupNode1 = new ASetup(pclassbodyNode2, listNode4, pclassbodyNode5);
        }
	nodeList.add(psetupNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ACard */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        pclassbodyNode1 = (PClassBody)nodeArrayList2.get(0);
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAclassbody1ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode2, null, listNode4, listNode5);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAclassbody2ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode3, null, listNode5, listNode6);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAclassbody3ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PConstruct pconstructNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        pconstructNode3 = (PConstruct)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode2, pconstructNode3, listNode4, listNode5);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAclassbody4ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PConstruct pconstructNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pconstructNode4 = (PConstruct)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode3, pconstructNode4, listNode5, listNode6);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAclassbody5ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode2, null, listNode5, listNode6);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAclassbody6ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode3, null, listNode6, listNode7);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAclassbody7ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PConstruct pconstructNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        }
        pconstructNode3 = (PConstruct)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode2, pconstructNode3, listNode5, listNode6);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAclassbody8ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PConstruct pconstructNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pconstructNode4 = (PConstruct)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode3, pconstructNode4, listNode6, listNode7);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAclassbody9ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode2, null, listNode4, listNode6);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAclassbody10ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode3, null, listNode5, listNode7);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAclassbody11ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PConstruct pconstructNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        }
        pconstructNode3 = (PConstruct)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode2, pconstructNode3, listNode4, listNode6);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAclassbody12ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PConstruct pconstructNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pconstructNode4 = (PConstruct)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode3, pconstructNode4, listNode5, listNode7);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAclassbody13ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode2, null, listNode5, listNode7);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAclassbody14ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode3, null, listNode6, listNode8);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAclassbody15ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PConstruct pconstructNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        }
        pconstructNode3 = (PConstruct)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode2, pconstructNode3, listNode5, listNode7);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAclassbody16ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PConstruct pconstructNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pconstructNode4 = (PConstruct)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode3, pconstructNode4, listNode6, listNode8);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASubclass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubclass psubclassNode1;
        {
            // Block
        TId tidNode2;
        PClassBody pclassbodyNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pclassbodyNode3 = (PClassBody)nodeArrayList3.get(0);

        psubclassNode1 = new ASubclass(tidNode2, pclassbodyNode3);
        }
	nodeList.add(psubclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAconstruct1Construct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstruct pconstructNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pconstructNode1 = new AConstruct(tidNode2, listNode3, listNode5);
        }
	nodeList.add(pconstructNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAconstruct2Construct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstruct pconstructNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pconstructNode1 = new AConstruct(tidNode2, listNode4, listNode6);
        }
	nodeList.add(pconstructNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AGame */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce APlayer */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        pclassbodyNode1 = (PClassBody)nodeArrayList2.get(0);
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAmoves1Moves */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAmoves2Moves */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAdcl1Dcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PType ptypeNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        {
            // Block
        PSingleDcl psingledclNode3;
        psingledclNode3 = (PSingleDcl)nodeArrayList2.get(0);
	if(psingledclNode3 != null)
	{
	  listNode4.add(psingledclNode3);
	}
        }

        pstmtNode1 = new ADclStmt(ptypeNode2, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAdcl2Dcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PType ptypeNode2;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        {
            // Block
        PSingleDcl psingledclNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        psingledclNode3 = (PSingleDcl)nodeArrayList2.get(0);
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(psingledclNode3 != null)
	{
	  listNode5.add(psingledclNode3);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstmtNode1 = new ADclStmt(ptypeNode2, listNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAsingledcl1SingleDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSingleDcl psingledclNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);

        psingledclNode1 = new ASingleDcl(tidNode2, null);
        }
	nodeList.add(psingledclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAsingledcl2SingleDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSingleDcl psingledclNode1;
        {
            // Block
        TId tidNode2;
        PExpr pexprNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        psingledclNode1 = new ASingleDcl(tidNode2, pexprNode3);
        }
	nodeList.add(psingledclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ADclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSingleDcl psingledclNode1;
        psingledclNode1 = (PSingleDcl)nodeArrayList2.get(0);
	nodeList.add(psingledclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AInit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AExpandExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TBoolOp tboolopNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tboolopNode3 = (TBoolOp)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ABoolOpExpr(pexprNode2, tboolopNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ASingleExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AExpandEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TEqualOp tequalopNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tequalopNode3 = (TEqualOp)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AEqualityExpr(pexprNode2, tequalopNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ASingleEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExpandRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TRelationOp trelationopNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        trelationopNode3 = (TRelationOp)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ARelationExpr(pexprNode2, trelationopNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ASingleRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AExpandAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TAddOp taddopNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        taddopNode3 = (TAddOp)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAddOpExpr(pexprNode2, taddopNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ASingleAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExpandTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMultOp tmultopNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tmultopNode3 = (TMultOp)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultOpExpr(pexprNode2, tmultopNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpandFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ALiteralFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pexprNode1 = new ALiteralExpr(pliteralNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AValFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PVal pvalNode2;
        pvalNode2 = (PVal)nodeArrayList1.get(0);

        pexprNode1 = new AValueExpr(pvalNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAinitfactor1Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pexprNode1 = new AListExpr(listNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAinitfactor2Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pexprNode1 = new AListExpr(listNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AParens */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AIntLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TIntLiteral tintliteralNode2;
        tintliteralNode2 = (TIntLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AIntLiteral(tintliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AFloatLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TFloatLiteral tfloatliteralNode2;
        tfloatliteralNode2 = (TFloatLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AFloatLiteral(tfloatliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AStringLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pliteralNode1 = new AStringLiteral(tstringNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ABoolLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TBoolLiteral tboolliteralNode2;
        tboolliteralNode2 = (TBoolLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ABoolLiteral(tboolliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAval1Val */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PCallField pcallfieldNode2;
        pcallfieldNode2 = (PCallField)nodeArrayList1.get(0);
	if(pcallfieldNode2 != null)
	{
	  listNode3.add(pcallfieldNode2);
	}
        }

        pvalNode1 = new AVal(listNode3);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAval2Val */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PCallField pcallfieldNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pcallfieldNode2 = (PCallField)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pcallfieldNode2 != null)
	{
	  listNode4.add(pcallfieldNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvalNode1 = new AVal(listNode4);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AValList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallField pcallfieldNode1;
        pcallfieldNode1 = (PCallField)nodeArrayList2.get(0);
	nodeList.add(pcallfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AFieldCallField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallField pcallfieldNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pcallfieldNode1 = new AFieldCallField(tidNode2);
        }
	nodeList.add(pcallfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ACallCallField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallField pcallfieldNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcallfieldNode1 = new ACallCallField(tidNode2, listNode4);
        }
	nodeList.add(pcallfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAcall1Call */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAcall2Call */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAcall3Call */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAcall4Call */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAmethoddcl1MethodDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDcl pmethoddclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PType ptypeNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pmethoddclNode1 = new AMethodDcl(tidNode2, listNode3, ptypeNode4, listNode6);
        }
	nodeList.add(pmethoddclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAmethoddcl2MethodDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDcl pmethoddclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PType ptypeNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pmethoddclNode1 = new AMethodDcl(tidNode2, listNode4, ptypeNode5, listNode7);
        }
	nodeList.add(pmethoddclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAparamdcllist1ParamDclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParamDcl pparamdclNode1;
        pparamdclNode1 = (PParamDcl)nodeArrayList1.get(0);
	if(pparamdclNode1 != null)
	{
	  listNode2.add(pparamdclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAparamdcllist2ParamDclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PParamDcl pparamdclNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pparamdclNode1 = (PParamDcl)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pparamdclNode1 != null)
	{
	  listNode3.add(pparamdclNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AExpandParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamDcl pparamdclNode1;
        pparamdclNode1 = (PParamDcl)nodeArrayList2.get(0);
	nodeList.add(pparamdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AParamDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamDcl pparamdclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparamdclNode1 = new AParamDcl(ptypeNode2, tidNode3);
        }
	nodeList.add(pparamdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AListType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        ptypeNode1 = new AListType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AVarType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AVarType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ASelectStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ADclStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ALoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ACallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PVal pvalNode2;
        pvalNode2 = (PVal)nodeArrayList1.get(0);

        pstmtNode1 = new ACallStmt(pvalNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pstmtNode1 = new AReturnStmt(pexprNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AIfSelectStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ASwitchSelectStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AAifstmt1IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        {
            // Block
        }

        pstmtNode1 = new AIfStmt(pexprNode2, listNode4, listNode5, listNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AAifstmt2IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }

        pstmtNode1 = new AIfStmt(pexprNode2, listNode4, listNode6, listNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AAifstmt3IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstmtNode1 = new AIfStmt(pexprNode2, listNode4, listNode5, listNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AAifstmt4IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pstmtNode1 = new AIfStmt(pexprNode2, listNode4, listNode6, listNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AElseIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseIf pelseifNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pelseifNode1 = new AElseIf(pexprNode2, listNode4);
        }
	nodeList.add(pelseifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ASwitchStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PVal pvalNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvalNode2 = (PVal)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstmtNode1 = new ASwitchStmt(pvalNode2, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ACaseCase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCase pcaseNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcaseNode1 = new ACaseCase(pexprNode2, listNode4);
        }
	nodeList.add(pcaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ADefaultCase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCase pcaseNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcaseNode1 = new ADefaultCase(listNode3);
        }
	nodeList.add(pcaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AWhileLoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstmtNode1 = new AWhileStmt(pexprNode2, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AForeachLoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PVal pvalNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        pvalNode3 = (PVal)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstmtNode1 = new AForeachStmt(tidNode2, pvalNode3, listNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AForLoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PStmt pstmtNode2;
        PExpr pexprNode3;
        PStmt pstmtNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        pstmtNode4 = (PStmt)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstmtNode1 = new AForStmt(pstmtNode2, pexprNode3, pstmtNode4, listNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ADeclareInitLoop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce AAssignInitLoop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AAssignValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PVal pvalNode2;
        TAssign tassignNode3;
        PExpr pexprNode4;
        pvalNode2 = (PVal)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pstmtNode1 = new AAssignStmt(pvalNode2, tassignNode3, pexprNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ATurn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce AEndCon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ATerminal$Include */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	if(tidNode1 != null)
	{
	  listNode2.add(tidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ANonTerminal$Include */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TId tidNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidNode2 = (TId)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidNode2 != null)
	{
	  listNode3.add(tidNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ATerminal$MethodDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethodDcl pmethoddclNode1;
        pmethoddclNode1 = (PMethodDcl)nodeArrayList1.get(0);
	if(pmethoddclNode1 != null)
	{
	  listNode2.add(pmethoddclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ANonTerminal$MethodDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethodDcl pmethoddclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddclNode2 = (PMethodDcl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddclNode2 != null)
	{
	  listNode3.add(pmethoddclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ATerminal$Subclass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSubclass psubclassNode1;
        psubclassNode1 = (PSubclass)nodeArrayList1.get(0);
	if(psubclassNode1 != null)
	{
	  listNode2.add(psubclassNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ANonTerminal$Subclass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PSubclass psubclassNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psubclassNode2 = (PSubclass)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psubclassNode2 != null)
	{
	  listNode3.add(psubclassNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ATerminal$DclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSingleDcl psingledclNode1;
        psingledclNode1 = (PSingleDcl)nodeArrayList1.get(0);
	if(psingledclNode1 != null)
	{
	  listNode2.add(psingledclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ANonTerminal$DclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PSingleDcl psingledclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psingledclNode2 = (PSingleDcl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psingledclNode2 != null)
	{
	  listNode3.add(psingledclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ATerminal$Element */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ANonTerminal$Element */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpr pexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ATerminal$ValList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCallField pcallfieldNode1;
        pcallfieldNode1 = (PCallField)nodeArrayList1.get(0);
	if(pcallfieldNode1 != null)
	{
	  listNode2.add(pcallfieldNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce ANonTerminal$ValList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCallField pcallfieldNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcallfieldNode2 = (PCallField)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcallfieldNode2 != null)
	{
	  listNode3.add(pcallfieldNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce ATerminal$Param */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce ANonTerminal$Param */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpr pexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce ATerminal$ExpandParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParamDcl pparamdclNode1;
        pparamdclNode1 = (PParamDcl)nodeArrayList1.get(0);
	if(pparamdclNode1 != null)
	{
	  listNode2.add(pparamdclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce ANonTerminal$ExpandParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParamDcl pparamdclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparamdclNode2 = (PParamDcl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparamdclNode2 != null)
	{
	  listNode3.add(pparamdclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce ATerminal$ElseIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PElseIf pelseifNode1;
        pelseifNode1 = (PElseIf)nodeArrayList1.get(0);
	if(pelseifNode1 != null)
	{
	  listNode2.add(pelseifNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce ANonTerminal$ElseIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PElseIf pelseifNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pelseifNode2 = (PElseIf)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pelseifNode2 != null)
	{
	  listNode3.add(pelseifNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce ATerminal$Case */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCase pcaseNode1;
        pcaseNode1 = (PCase)nodeArrayList1.get(0);
	if(pcaseNode1 != null)
	{
	  listNode2.add(pcaseNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce ANonTerminal$Case */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCase pcaseNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcaseNode2 = (PCase)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcaseNode2 != null)
	{
	  listNode3.add(pcaseNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {14, SHIFT, 1}, {40, SHIFT, 2}, },
			{{-1, ERROR, 1}, {12, SHIFT, 7}, },
			{{-1, ERROR, 2}, {45, SHIFT, 8}, },
			{{-1, ERROR, 3}, {46, ACCEPT, -1}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 5}, {17, SHIFT, 9}, },
			{{-1, ERROR, 6}, {14, SHIFT, 1}, {40, SHIFT, 2}, },
			{{-1, ERROR, 7}, {34, SHIFT, 13}, },
			{{-1, ERROR, 8}, {21, SHIFT, 15}, },
			{{-1, ERROR, 9}, {12, SHIFT, 16}, },
			{{-1, ERROR, 10}, {31, SHIFT, 17}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 12}, {17, SHIFT, 9}, },
			{{-1, ERROR, 13}, {12, SHIFT, 20}, },
			{{-1, ERROR, 14}, {43, SHIFT, 22}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 16}, {13, SHIFT, 24}, {39, SHIFT, 25}, },
			{{-1, ERROR, 17}, {12, SHIFT, 28}, },
			{{-1, ERROR, 18}, {32, SHIFT, 30}, },
			{{-1, ERROR, 19}, {31, SHIFT, 17}, },
			{{-1, ERROR, 20}, {13, SHIFT, 33}, {20, SHIFT, 34}, {22, SHIFT, 35}, {24, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {37, SHIFT, 39}, {39, SHIFT, 25}, {41, SHIFT, 40}, {44, SHIFT, 41}, {45, SHIFT, 42}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 22}, {12, SHIFT, 20}, },
			{{-1, ERROR, 23}, {42, SHIFT, 60}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 25}, {45, SHIFT, 62}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 27}, {13, SHIFT, 63}, {39, SHIFT, 25}, },
			{{-1, ERROR, 28}, {13, SHIFT, 65}, {20, SHIFT, 34}, {22, SHIFT, 35}, {24, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {37, SHIFT, 39}, {45, SHIFT, 42}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 30}, {12, SHIFT, 28}, },
			{{-1, REDUCE, 0}, {39, SHIFT, 25}, },
			{{-1, ERROR, 32}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 34}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, ERROR, 35}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, ERROR, 36}, {45, SHIFT, 76}, },
			{{-1, ERROR, 37}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, ERROR, 38}, {37, SHIFT, 39}, {45, SHIFT, 89}, },
			{{-1, ERROR, 39}, {38, SHIFT, 94}, },
			{{-1, ERROR, 40}, {45, SHIFT, 95}, },
			{{-1, ERROR, 41}, {45, SHIFT, 96}, },
			{{-1, REDUCE, 60}, {10, SHIFT, 97}, {45, REDUCE, 74}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 44}, {13, SHIFT, 99}, {39, SHIFT, 25}, {41, SHIFT, 40}, },
			{{-1, ERROR, 45}, {21, SHIFT, 102}, },
			{{-1, ERROR, 46}, {8, SHIFT, 103}, {21, SHIFT, 104}, },
			{{-1, REDUCE, 57}, {16, SHIFT, 105}, },
			{{-1, ERROR, 48}, {45, SHIFT, 108}, },
			{{-1, ERROR, 49}, {45, SHIFT, 110}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 55}, {21, SHIFT, 111}, },
			{{-1, ERROR, 56}, {13, SHIFT, 112}, {39, SHIFT, 25}, {41, SHIFT, 40}, },
			{{-1, ERROR, 57}, {13, SHIFT, 114}, {20, SHIFT, 34}, {22, SHIFT, 35}, {24, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {37, SHIFT, 39}, {39, SHIFT, 25}, {41, SHIFT, 40}, {44, SHIFT, 41}, {45, SHIFT, 42}, },
			{{-1, ERROR, 58}, {13, SHIFT, 119}, {41, SHIFT, 40}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 60}, {12, SHIFT, 28}, },
			{{-1, ERROR, 61}, {13, SHIFT, 122}, },
			{{-1, ERROR, 62}, {10, SHIFT, 123}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 66}, {13, SHIFT, 124}, {20, SHIFT, 34}, {22, SHIFT, 35}, {24, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {37, SHIFT, 39}, {45, SHIFT, 42}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 2}, {39, SHIFT, 25}, },
			{{-1, REDUCE, 1}, {39, SHIFT, 25}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 74}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, ERROR, 75}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {13, SHIFT, 127}, {45, SHIFT, 76}, },
			{{-1, REDUCE, 60}, {10, SHIFT, 97}, },
			{{-1, ERROR, 77}, {6, SHIFT, 131}, {21, SHIFT, 132}, },
			{{-1, REDUCE, 37}, {9, SHIFT, 133}, },
			{{-1, REDUCE, 39}, {7, SHIFT, 134}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 135}, },
			{{-1, REDUCE, 43}, {2, SHIFT, 136}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 86}, {6, SHIFT, 131}, {12, SHIFT, 28}, },
			{{-1, ERROR, 87}, {12, SHIFT, 138}, },
			{{-1, ERROR, 88}, {6, SHIFT, 131}, {12, SHIFT, 28}, },
			{{-1, REDUCE, 60}, {10, SHIFT, 97}, {33, SHIFT, 140}, {45, REDUCE, 74}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 91}, {8, SHIFT, 103}, },
			{{-1, ERROR, 92}, {21, SHIFT, 141}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 95}, {12, SHIFT, 20}, },
			{{-1, ERROR, 96}, {10, SHIFT, 143}, },
			{{-1, ERROR, 97}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {11, SHIFT, 144}, {12, SHIFT, 75}, {15, SHIFT, 145}, {45, SHIFT, 76}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 100}, {13, SHIFT, 149}, {39, SHIFT, 25}, {41, SHIFT, 40}, },
			{{-1, ERROR, 101}, {13, SHIFT, 151}, {41, SHIFT, 40}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 103}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 105}, {45, SHIFT, 76}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 58}, {16, SHIFT, 105}, },
			{{-1, REDUCE, 32}, {8, SHIFT, 155}, },
			{{-1, REDUCE, 30}, {15, SHIFT, 157}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 113}, {13, SHIFT, 160}, {41, SHIFT, 40}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 115}, {13, SHIFT, 161}, {39, SHIFT, 25}, {41, SHIFT, 40}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 117}, {13, SHIFT, 164}, {39, SHIFT, 25}, {41, SHIFT, 40}, },
			{{-1, ERROR, 118}, {13, SHIFT, 166}, {41, SHIFT, 40}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 123}, {11, SHIFT, 167}, {37, SHIFT, 39}, {45, SHIFT, 168}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 3}, {39, SHIFT, 25}, },
			{{-1, ERROR, 126}, {6, SHIFT, 131}, {11, SHIFT, 172}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 128}, {6, SHIFT, 131}, {21, SHIFT, 173}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 130}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {13, SHIFT, 174}, {45, SHIFT, 76}, },
			{{-1, ERROR, 131}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 133}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, ERROR, 134}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, ERROR, 135}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, ERROR, 136}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, REDUCE, 86}, {23, SHIFT, 181}, },
			{{-1, ERROR, 138}, {25, SHIFT, 185}, {26, SHIFT, 186}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 140}, {45, SHIFT, 76}, },
			{{-1, ERROR, 141}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 143}, {11, SHIFT, 191}, {37, SHIFT, 39}, {45, SHIFT, 168}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 145}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, ERROR, 146}, {6, SHIFT, 131}, {11, SHIFT, 194}, {15, SHIFT, 145}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 148}, {11, SHIFT, 196}, {15, SHIFT, 145}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 150}, {13, SHIFT, 198}, {41, SHIFT, 40}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 100}, {6, SHIFT, 131}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 155}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 157}, {45, SHIFT, 108}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 31}, {15, SHIFT, 157}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 162}, {13, SHIFT, 202}, {39, SHIFT, 25}, {41, SHIFT, 40}, },
			{{-1, ERROR, 163}, {13, SHIFT, 204}, {41, SHIFT, 40}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 165}, {13, SHIFT, 205}, {41, SHIFT, 40}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 167}, {38, SHIFT, 206}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 169}, {11, SHIFT, 207}, },
			{{-1, REDUCE, 69}, {15, SHIFT, 208}, },
			{{-1, ERROR, 171}, {45, SHIFT, 211}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 36}, {9, SHIFT, 133}, },
			{{-1, REDUCE, 38}, {7, SHIFT, 134}, },
			{{-1, REDUCE, 40}, {1, SHIFT, 135}, },
			{{-1, REDUCE, 42}, {2, SHIFT, 136}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 181}, {12, SHIFT, 28}, {22, SHIFT, 212}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 87}, {23, SHIFT, 181}, },
			{{-1, ERROR, 185}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, ERROR, 186}, {27, SHIFT, 217}, },
			{{-1, REDUCE, 123}, },
			{{-1, ERROR, 188}, {13, SHIFT, 218}, {25, SHIFT, 185}, {26, SHIFT, 186}, },
			{{-1, ERROR, 189}, {12, SHIFT, 28}, },
			{{-1, ERROR, 190}, {6, SHIFT, 131}, {21, SHIFT, 221}, },
			{{-1, ERROR, 191}, {12, SHIFT, 28}, },
			{{-1, ERROR, 192}, {11, SHIFT, 223}, },
			{{-1, REDUCE, 66}, {6, SHIFT, 131}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 195}, {11, SHIFT, 224}, {15, SHIFT, 145}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 35}, {6, SHIFT, 131}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 203}, {13, SHIFT, 225}, {41, SHIFT, 40}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 206}, {37, SHIFT, 39}, {45, SHIFT, 168}, },
			{{-1, ERROR, 207}, {38, SHIFT, 227}, },
			{{-1, ERROR, 208}, {37, SHIFT, 39}, {45, SHIFT, 168}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 70}, {15, SHIFT, 208}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 212}, {0, SHIFT, 70}, {3, SHIFT, 71}, {4, SHIFT, 72}, {5, SHIFT, 73}, {10, SHIFT, 74}, {12, SHIFT, 75}, {45, SHIFT, 76}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 216}, {6, SHIFT, 131}, {27, SHIFT, 231}, },
			{{-1, ERROR, 217}, {12, SHIFT, 28}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 221}, {45, SHIFT, 76}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 223}, {12, SHIFT, 28}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 226}, {12, SHIFT, 28}, },
			{{-1, ERROR, 227}, {37, SHIFT, 39}, {45, SHIFT, 168}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 120}, },
			{{-1, ERROR, 230}, {6, SHIFT, 131}, {12, SHIFT, 28}, },
			{{-1, ERROR, 231}, {12, SHIFT, 28}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 233}, {12, SHIFT, 28}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 236}, {12, SHIFT, 28}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 68}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {6, 11}, },
			{{-1, 5}, {6, 12}, },
			{{-1, 14}, },
			{{-1, 21}, {22, 59}, {95, 142}, },
			{{-1, 43}, {58, 120}, {101, 120}, {113, 120}, {118, 120}, {150, 120}, {163, 120}, {165, 120}, {203, 120}, },
			{{-1, 44}, {57, 115}, },
			{{-1, 61}, },
			{{-1, 23}, },
			{{-1, 10}, {12, 19}, },
			{{-1, 45}, {38, 90}, },
			{{-1, 109}, {157, 200}, },
			{{-1, 158}, {159, 201}, },
			{{-1, 156}, },
			{{-1, 128}, {34, 77}, {35, 86}, {37, 88}, {74, 126}, {97, 146}, {103, 152}, {141, 190}, {145, 193}, {155, 199}, {185, 216}, {212, 230}, },
			{{-1, 78}, {131, 176}, },
			{{-1, 79}, {133, 177}, },
			{{-1, 80}, {134, 178}, },
			{{-1, 81}, {135, 179}, },
			{{-1, 82}, {136, 180}, },
			{{-1, 83}, },
			{{-1, 84}, },
			{{-1, 129}, {130, 175}, },
			{{-1, 85}, {20, 46}, {28, 46}, {36, 87}, {38, 91}, {57, 46}, {66, 46}, {140, 189}, {221, 91}, },
			{{-1, 106}, {107, 154}, },
			{{-1, 47}, {105, 153}, },
			{{-1, 98}, },
			{{-1, 147}, {148, 197}, {195, 197}, },
			{{-1, 26}, {27, 64}, {56, 64}, {68, 64}, {100, 64}, {117, 64}, {125, 64}, {162, 64}, },
			{{-1, 169}, {143, 192}, },
			{{-1, 209}, {210, 229}, },
			{{-1, 170}, {208, 228}, },
			{{-1, 48}, {123, 171}, {143, 171}, {206, 226}, {208, 171}, {227, 236}, },
			{{-1, 49}, },
			{{-1, 50}, {57, 116}, {66, 116}, },
			{{-1, 51}, },
			{{-1, 29}, {30, 67}, {60, 121}, {86, 137}, {88, 139}, {181, 213}, {189, 220}, {191, 222}, {217, 232}, {223, 234}, {226, 235}, {230, 237}, {231, 238}, {233, 239}, {236, 240}, },
			{{-1, 52}, },
			{{-1, 182}, {184, 214}, },
			{{-1, 183}, {184, 215}, },
			{{-1, 53}, },
			{{-1, 187}, {188, 219}, },
			{{-1, 54}, },
			{{-1, 92}, },
			{{-1, 55}, {38, 93}, {221, 233}, },
			{{-1, 18}, {19, 32}, },
			{{-1, 31}, {32, 69}, },
			{{-1, 6}, },
			{{-1, 27}, {20, 56}, {31, 68}, {44, 100}, {57, 117}, {69, 125}, {115, 162}, },
			{{-1, 57}, {28, 66}, },
			{{-1, 58}, {44, 101}, {56, 113}, {57, 118}, {100, 150}, {115, 163}, {117, 165}, {162, 203}, },
			{{-1, 159}, },
			{{-1, 130}, },
			{{-1, 107}, },
			{{-1, 148}, {146, 195}, },
			{{-1, 210}, },
			{{-1, 184}, },
			{{-1, 188}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'Setup', 'include'",
			"expecting: '{'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'Moves'",
			"expecting: 'Card'",
			"expecting: ';'",
			"expecting: 'Turn'",
			"expecting: 'Player'",
			"expecting: '}', 'Function'",
			"expecting: 'EndCondition'",
			"expecting: '}', 'return', 'if', 'switch', 'while', 'for', 'List', 'Function', 'Subclass', 'Construct', id",
			"expecting: 'Game'",
			"expecting: '}', 'Function', 'Subclass', EOF",
			"expecting: '}', 'return', 'if', 'switch', 'while', 'for', 'List', id",
			"expecting: 'Function', EOF",
			"expecting: '}', 'Subclass', 'Game', 'Player'",
			"expecting: bool literal, int literal, float literal, string, '(', '{', id",
			"expecting: 'List', id",
			"expecting: 'typeof'",
			"expecting: assign, '(', '.', ';', id",
			"expecting: '}', 'Subclass'",
			"expecting: '}', 'Function', 'Subclass'",
			"expecting: assign, ';'",
			"expecting: add op, mult op, bool op, relation op, assign, equal op, ')', '{', ',', '.', ';', ':'",
			"expecting: '}'",
			"expecting: '('",
			"expecting: '}', 'return', 'if', 'else', 'switch', 'case', 'default', 'while', 'for', 'EndCondition', 'List', 'Function', 'Subclass', 'Construct', id, EOF",
			"expecting: add op, mult op, bool op, relation op, equal op, ')', '{', ',', ';', ':'",
			"expecting: bool literal, int literal, float literal, string, '(', '{', '}', id",
			"expecting: add op, mult op, bool op, relation op, assign, equal op, '(', ')', '{', ',', '.', ';', ':'",
			"expecting: bool op, ';'",
			"expecting: bool op, equal op, ')', '{', ',', ';', ':'",
			"expecting: bool op, relation op, equal op, ')', '{', ',', ';', ':'",
			"expecting: add op, bool op, relation op, equal op, ')', '{', ',', ';', ':'",
			"expecting: bool op, '{'",
			"expecting: assign, '(', '.', 'in', id",
			"expecting: assign",
			"expecting: bool literal, int literal, float literal, string, '(', ')', '{', ',', id",
			"expecting: assign, ',', ';'",
			"expecting: ',', ';'",
			"expecting: '{', id",
			"expecting: ')', 'List', id",
			"expecting: bool op, ')'",
			"expecting: '}', 'return', 'if', 'else', 'switch', 'while', 'for', 'List', 'Function', 'Subclass', 'Construct', id",
			"expecting: 'case', 'default'",
			"expecting: bool op, ')', ','",
			"expecting: ')', ','",
			"expecting: bool op, '{', ';'",
			"expecting: ')'",
			"expecting: '{', 'if'",
			"expecting: ':'",
			"expecting: '}', 'case', 'default'",
			"expecting: bool op, ',', ';'",
			"expecting: bool op, ':'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 4, 0, 5, 6, 1, 7, 0, 4, 1, 8, 0, 9, 1, 10, 7, 11, 8, 1, 12, 7, 2, 13, 9, 14, 10, 1, 15, 10, 16, 17, 17, 2, 17, 18, 19, 2, 2, 20, 21, 22, 6, 23, 24, 2, 2, 11, 11, 11, 11, 11, 6, 22, 11, 21, 12, 1, 25, 26, 7, 13, 27, 14, 15, 15, 15, 28, 28, 28, 28, 17, 29, 30, 31, 32, 33, 34, 28, 28, 28, 28, 28, 35, 1, 35, 36, 6, 37, 6, 6, 2, 1, 26, 38, 24, 16, 22, 21, 11, 17, 11, 2, 24, 24, 39, 40, 41, 11, 16, 21, 16, 22, 11, 22, 21, 16, 21, 25, 4, 42, 27, 15, 43, 28, 31, 29, 29, 17, 11, 17, 17, 17, 17, 44, 45, 11, 2, 17, 21, 42, 24, 17, 46, 47, 47, 16, 21, 16, 48, 24, 24, 17, 40, 2, 40, 40, 16, 16, 22, 21, 16, 21, 16, 19, 41, 49, 47, 2, 28, 29, 28, 29, 32, 33, 34, 28, 28, 50, 44, 11, 44, 17, 51, 52, 52, 1, 31, 1, 49, 46, 24, 47, 24, 47, 16, 53, 40, 40, 16, 21, 16, 16, 18, 19, 18, 47, 47, 47, 17, 11, 44, 11, 54, 1, 11, 52, 11, 2, 22, 1, 24, 16, 1, 18, 47, 47, 35, 1, 52, 1, 22, 13, 1, 44, 52, 11, 13, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
